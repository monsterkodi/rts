###
00000000   000   000  000   000   0000000  000   0000000   0000000
000   000  000   000   000 000   000       000  000       000     
00000000   000000000    00000    0000000   000  000       0000000 
000        000   000     000          000  000  000            000
000        000   000     000     0000000   000   0000000  0000000 
###

OIMO = require 'oimo'

function Physics

    @: ->

        @world = new OIMO.World
            timestep:   1/60  
            gravity:   [0,0,-9.8] 
        
        @body = @world.add 
            type:        'sphere'  
            size:        [0.5 0.5 0.5]   
            pos:         [0,0,50]  
            move:        true      
            kinematic:   true
            density:     1
            restitution: 0.1
            friction:    0.1
        
        @addChain()
            
        geom  = Geom.sphere radius:0.25 sgmt:8
        @mesh = new Mesh geom, Materials.wireframe
        world.addObject @mesh
        
        ground = @world.add 
            size:    [3000 3000 10] 
            pos:     [0 0 -5.5] 
            density: 1000
        
        # @world.postLoop = @postLoop
        # @world.play()
        
    simulate: (scaledDelta, timeSum) ->
        
        @body.position.copy vec(@body.position).lerp rts.centerHelper.position, 0.2
        @body.position.z = Math.max 0 @body.position.z
        
        @world.step()
        @postLoop()
        
    postLoop: =>
        
        @mesh.position.copy @body.getPosition()
        @mesh.quaternion.copy @body.getQuaternion()
        
        for b in @boxes
            
            b.mesh.position.copy b.getPosition()
            b.mesh.quaternion.copy b.getQuaternion()
        
    addChain: ->

        p = @body.position
        
        @boxes = []
    
        for i in 0...2
    
            b = @world.add type:'sphere' size:[0.5, 0.5, 0.5], pos:[p.x, p.y, p.z-i*0.5], density:0.5 restitution:1 move:true
            b.mesh = new Mesh Geom.sphere(radius:0.25 sgmt:8), Materials.wireframe
            world.addObject b.mesh
            @boxes.push b 
    
            if i == 0
                @world.add
                    type:  'jointBall'
                    body1: @body
                    body2: b.name
                    pos1:  [0, 0, -0.5]
                    pos2:  [0, 0,  0.5]
                    axe1:  [0, 0, -1]
                    axe2:  [0, 0,  1] 
            else 
                @world.add 
                    type:'jointBall'
                    body1: b.name-1
                    body2: b.name
                    pos1:  [0, 0, -0.5]
                    pos2:  [0, 0,  0.5]
                    axe1:  [0, 0, -1]
                    axe2:  [0, 0,  1] 

module.exports = Physics
