###
000000000  00000000    0000000    0000000  000   000
   000     000   000  000   000  000       000  000 
   000     0000000    000000000  000       0000000  
   000     000   000  000   000  000       000  000 
   000     000   000  000   000   0000000  000   000
###

Rail = require './rail'
CurveCtrl = require '../track/curvectrl'
ModeSign = require './modesign'
Train = require '../train/train'

function Track

    @id: 0

    @: (n1, n2, points, @name) ->
        
        Track.id++
        
        @name ?= "t#{Track.id}"
        @node  = [n1, n2]
        
        @mode   = ModeSign.twoway 
        @trains = []
        
        @curve = new CurvePath
        @ctrls = []
        
        points.unshift n1.getPos()
        curveNum = points.length / 3
        if curveNum % 1
            log 'darfuk?'
        points.push n2.getPos()
        
        for index in 0...curveNum
            p = points.slice index*3, index*3+4
            @curve.add new CubicBezierCurve3 p[0], p[1], p[2], p[3]
        
        for index in 0...curveNum
            @ctrls.push new CurveCtrl @, index
                    
        @modeSign = new ModeSign @
        @createRail()     
        
        @mesh.track  = @
        @mesh.toSave = @toSave
        @mesh.toSave.key = 'tracks'
        
    # 000000000  00000000    0000000   000  000   000  
    #    000     000   000  000   000  000  0000  000  
    #    000     0000000    000000000  000  000 0 000  
    #    000     000   000  000   000  000  000  0000  
    #    000     000   000  000   000  000  000   000  
    
    hasTrain: (train) -> @trains.indexOf(train) >= 0
    addTrain: (train) -> 
    
        if not @hasTrain() 
            @trains.push train
            if not @blockMesh
                @blockMesh = new Mesh Geom.triangle(size:[0.5 0.5 0.73]), Materials.track.block
                @blockMesh.noHitTest = true
                if train.path.revers[train.path.indexAtDelta()]
                    ld = 6/@curve.getLength()
                    tangent = @curve.getTangentAt ld
                    tangent.multiplyScalar -1
                else
                    ld = (@curve.getLength()-6)/@curve.getLength()
                    tangent = @curve.getTangentAt ld
                @curve.getPointAt ld, @blockMesh.position
                @blockMesh.quaternion.copy Quaternion.unitVectors Vector.unitY, tangent
                @mesh.add @blockMesh
            
    subTrain: (train) -> 
    
        if (i = @trains.indexOf(train)) >= 0
            @trains.splice i, 1
            
        if empty @trains
            @blockMesh.removeFromParent()
            delete @blockMesh
            
    explodeTrains: ->
        
        for train in @trains
            train.explode()
        
    #  0000000   0000000   000   000  00000000  
    # 000       000   000  000   000  000       
    # 0000000   000000000   000 000   0000000   
    #      000  000   000     000     000       
    # 0000000   000   000      0      00000000  
    
    toSave: =>

        fix = (p) -> x:p.x.toFixed(1), y:p.y.toFixed(1), z:p.z.toFixed(1)
        ctrl = []
        for i in 0...@curve.curves.length
            ctrl.push fix @curve.curves[i].v1
            ctrl.push fix @curve.curves[i].v2
            if i < @curve.curves.length-1
                ctrl.push fix @curve.curves[i].v3
        
        name: @name
        node: @node.map (n) -> n.name
        mode: @mode
        ctrl: ctrl
        
    del: =>
        
        if @mesh
            @explodeTrains()
            @modeSign.del()
            post.emit 'delTrack' @
            
            @node[0]?.removeTrack @
            @node[1]?.removeTrack @
            
            delete @mesh.handler
            world.removePickable @mesh
            world.removeObject @mesh
            for ctrl in @ctrls
                ctrl.del()
            delete @modeSign
            delete @curve
            delete @node
            delete @ctrls
            delete @mesh
            delete @rail
            
    # 00     00   0000000   0000000    00000000  
    # 000   000  000   000  000   000  000       
    # 000000000  000   000  000   000  0000000   
    # 000 0 000  000   000  000   000  000       
    # 000   000   0000000   0000000    00000000  
    
    nextMode: -> @setMode (@mode+1)%3
        
    setMode: (@mode) ->
        
        @modeSign.updateMode()
            
    # 00     00   0000000   000   000   0000000  00000000    
    # 000   000  000   000  000   000  000       000         
    # 000000000  000   000  000   000  0000000   0000000     
    # 000 0 000  000   000  000   000       000  000         
    # 000   000   0000000    0000000   0000000   00000000    
            
    onEnter: (hit, lastHit, event) => 
        
        if event.buttons == 0
            post.on 'delete' @del
            @mesh.material = Materials.track.highlight
            world.cursorTrack = @
        
    onLeave: => 
        
        post.removeListener 'delete' @del
        @mesh.material = Materials.track.rail
        if world.cursorTrack == @
            delete world.cursorTrack
            
    onClick: (hit, event) =>
        
        if event.button == 1 # middle button
            @nextMode()
        if event.button == 0
            
            boxcars = 3
            length  = (boxcars+1)*Train.carDist
            
            delta = @deltaClosestToPoint hit.point
            
            if @mode == ModeSign.backward
                node = @node[0]
                delta = @curve.getLength()-delta
                if delta < length # tail outside track
                    log 'tail outside backward track'
                    return
            else
                node = @node[1]
                if delta < length # tail outside track
                    log 'tail outside forward track'
                    return
                
            log 'addTrain delta' delta, 'node' node.name
            world.onAddTrain @, delta, node, boxcars
            
    onDoubleClick: =>
        
        log 'split track!'
        
    deltaClosestToPoint: (point) ->
        
        curveLength = @curve.getLength()
        numPoints = parseInt curveLength
        points = @curve.getSpacedPoints numPoints
        dists  = points.map (p) -> p.distanceTo point
        mi = 0
        md = Number.MAX_VALUE
        for d,i in dists
            if d < md
                mi = i
                md = d
        mi*curveLength/numPoints
        
    # 00     00   0000000   000   000  00000000  0000000    
    # 000   000  000   000  000   000  000       000   000  
    # 000000000  000   000   000 000   0000000   000   000  
    # 000 0 000  000   000     000     000       000   000  
    # 000   000   0000000       0      00000000  0000000    
    
    ctrlMoved: =>
        
        @curve.updateArcLengths()
        @createRail()
                
    nodeRotated: (n) =>
        
        dir = n.getDir()
        if @ not in n.outTracks
            dir.negate()
        
        if n == @node[0]
            @ctrls[0].rotateStart dir
        else if n == @node[1]
            @ctrls[-1].rotateEnd dir
        
        @curve.updateArcLengths()
        @createRail()

    nodeMoved: (n) =>
        
        if n == @node[0]
            @ctrls[0].moveStartTo n.getPos()
        else
            @ctrls[-1].moveEndTo n.getPos()
        
        @curve.updateArcLengths()
        @createRail()
        
    # 00000000    0000000   000  000      
    # 000   000  000   000  000  000      
    # 0000000    000000000  000  000      
    # 000   000  000   000  000  000      
    # 000   000  000   000  000  0000000  
    
    createRail: ->
        
        @explodeTrains()
        
        @rail = new Rail @curve, 100
                
        if @mesh
            @mesh.geometry = @rail
        else
            @createMesh()                
            
        # @curve.getPointAt 0.25, @label.position
        ld = 4/@curve.getLength()
        @curve.getPointAt ld, @label.position
        @label.position.z = 0.36
        
        @curve.getTangentAt ld, Vector.tmp
        @label.quaternion.copy Quaternion.unitVectors Vector.unitY, Vector.tmp
        
        @modeSign.updateMode()
        
    createMesh: ->    
    
        @mesh = new Mesh @rail, Materials.track.rail
        @mesh.name = @name
        @mesh.setShadow()
        @mesh.handler = @
        
        @label = world.addLabel text:@name, size:0.5, mono:true
        @mesh.add @label
        
        world.addObject @mesh
        world.addPickable @mesh
                
    nodeOpposite: (node) ->
        
        if      
            node == @node[0] ➜ return @node[1]
            node == @node[1] ➜ return @node[0]
                             ➜ log 'nodeOpposite.dafuk?'
           
    modeForNode: (node) ->
        
        if @mode == ModeSign.twoway ➜ return @mode

        if node == @node[@mode%2]
            if @ in node.inTracks
                return ModeSign.forward
            else
                return ModeSign.backward
        else
            if @ in node.outTracks
                return ModeSign.forward
            else
                return ModeSign.backward
                             
    getLength: -> @curve.getLength()
    
    trainCurveDistance: (train) ->
        
        if train.path.revers[train.path.indexAtDelta()]
            nd = train.path.prevDistance()
        else
            nd = train.path.nextDistance()
                             
    getPoints: ->
        
        points = []
        for curve in @curve.curves
            points = points.concat [curve.v0, curve.v1, curve.v2, curve.v3]
        points

    getCtrlPoints: (includeLast) ->
        
        points = []
        for curve in @curve.curves
            points = points.concat [curve.v1, curve.v2, curve.v3]
        points.pop() if not includeLast
        points
        
    getPointsFromNode: (node) ->
        
        points = @getPoints()
        if node == @node[1] ➜ points.reverse()
        points

    getCtrlPointsFromNode: (node, includeLast) ->
        
        points = @getCtrlPoints includeLast
        if node == @node[1] ➜ points.reverse()
        points
                
module.exports = Track
