###
000000000  00000000    0000000    0000000  000   000
   000     000   000  000   000  000       000  000 
   000     0000000    000000000  000       0000000  
   000     000   000  000   000  000       000  000 
   000     000   000  000   000   0000000  000   000
###

Rail = require './rail'
CurveCtrl = require '../lib/curvectrl'

function Track

    @: (points, @name) ->
        
        @node = []
        
        @curve = new THREE.CurvePath
        
        @ctrls = []
        
        segnum = Math.floor points.length / 4
        for pi in 0...segnum
            c = new CubicBezierCurve3 points[pi*4+0], points[pi*4+1], points[pi*4+2], points[pi*4+3]
            @curve.add c
            @ctrls.push new CurveCtrl c, @curve, pi, @ctrlMoved
                    
        @createRail()
        
    ctrlMoved: =>
        
        @curve.updateArcLengths()
        @createRail()
                
    updateNode: (n) ->
        
        if n == @node[0]
            @ctrls[0].moveStartTo n.position
        else
            @ctrls[-1].moveEndTo n.position
        
        @curve.updateArcLengths()
        @createRail()
        
    createRail: ->
        
        @rail = new Rail @curve, 100
        if @mesh
            @mesh.geometry = @rail
        else
            @createMesh()                
        
    onDoubleClick: ->
        
        log 'split track!'
            
    createMesh: ->    
    
        @mesh = new THREE.Mesh @rail, Materials.train.rail
        @mesh.name = @name
        @mesh.castShadow = true
        @mesh.receiveShadow = true
        @mesh.handler = @

module.exports = Track
