###
 0000000  000   000  00000000   000   000  00000000   0000000  000000000  00000000   000    
000       000   000  000   000  000   000  000       000          000     000   000  000    
000       000   000  0000000     000 000   0000000   000          000     0000000    000    
000       000   000  000   000     000     000       000          000     000   000  000    
 0000000   0000000   000   000      0      00000000   0000000     000     000   000  0000000
###

MIN_CTRL_DIST = 2

function CurveCtrl

    @: (@curve, @curvePath, @index, @dragCB) ->
        
        @isLast  = @index == @curvePath.curves.length-1
        @isFirst = @index == 0
        @isMid   = not @isFirst

        @curveStart = @curve.v0
        @ctrlStart  = @curve.v1
        @ctrlEnd    = @curve.v2
        @curveEnd   = @curve.v3
        
        @group = new Group
        @group.name = 'ctrl'
        
        if @isMid
            geom = new BoxGeometry 1 1 1
            mesh = new Mesh geom, Materials.ctrl.start
            @prevCtrlEnd = @curvePath.curves[@index-1].v2
            mesh.position.y = -@prevCtrlDist()
            mesh.onDrag = @onDrag 
            mesh.name = 'prevCtrlEnd'
            mesh.handler = @
            mesh.visible = false
            @meshPrevCtrlEnd = mesh
            @group.add @meshPrevCtrlEnd

            geom = new BoxGeometry 0.35 @prevCtrlDist(), 0.35
            mesh = new Mesh geom, Materials.ctrl.start
            mesh.position.y = -@prevCtrlDist()/2
            mesh.name = 'prevCtrlRod'
            mesh.visible = false
            @meshPrevCtrlRod = mesh
            @group.add @meshPrevCtrlRod
            
        if not @isFirst
            geom = new BoxGeometry 1 1 0.71
            mesh = new Mesh geom, Materials.ctrl.curve
            mesh.onDrag = @onDrag 
            mesh.name = 'curveStart'
            mesh.handler = @
            mesh.castShadow = true
            mesh.receiveShadow = true
            
            @meshCurveStart = mesh
            world.addPickable @meshCurveStart
            @group.add @meshCurveStart
        
        geom = new BoxGeometry 1 1 1
        mesh = new Mesh geom, Materials.ctrl.start
        if not @isFirst
            mesh.onDrag = @onDrag 
        else
            mesh.material = Materials.ctrl.transparent
            
        mesh.handler = @
        mesh.position.y = @ctrlStartDist()
        mesh.name = 'ctrlStart'
        mesh.visible = false
        @meshCtrlStart = mesh
        @group.add @meshCtrlStart

        geom = new BoxGeometry 0.35 @ctrlStartDist(), 0.35
        mesh = new Mesh geom, Materials.ctrl.start
        mesh.position.y = @ctrlStartDist()/2
        mesh.name = 'ctrlRod'
        mesh.visible = false
        @meshCtrlRod = mesh
        @group.add @meshCtrlRod
        
        @group.position.copy @curveStart
        @setDir @curve.getTangent 0, Vector.tmp
            
        world.addObject @group
        
    del: ->
        
        world.hideCompass @
        world.removeObject @group
        world.removePickable @meshCurveStart
        delete @group
        delete @meshCtrlStart
        delete @meshCurveStart
        delete @meshPrevCtrlEnd
        
    compassCenterDoubleClicked: =>
        
        post.emit 'convertCtrlToNode' @
        
    onHover: =>

        if world.compass.object != @
            @activate()
                    
    #  0000000    0000000  000000000  000  000   000  00000000  
    # 000   000  000          000     000  000   000  000       
    # 000000000  000          000     000   000 000   0000000   
    # 000   000  000          000     000     000     000       
    # 000   000   0000000     000     000      0      00000000  
    
    onLeave: (ray, hit) =>
        
        if hit.mesh.name == 'ctrlStart'
            @meshCtrlStart.material = Materials.ctrl.start
            @meshCtrlRod.material   = Materials.ctrl.start
        if hit.mesh.name == 'prevCtrlEnd'
            @meshPrevCtrlEnd.material = Materials.ctrl.start
            @meshPrevCtrlRod.material = Materials.ctrl.start
        
    onEnter: (ray, hit) =>
        
        log hit.mesh.name
        
        if hit.mesh.name == 'curveStart'
            if world.compass.object != @
                @activate()
        if hit.mesh.name == 'ctrlStart'
            @meshCtrlStart.material = Materials.ctrl.highlight
            @meshCtrlRod.material   = Materials.ctrl.highlight
        if hit.mesh.name == 'prevCtrlEnd'
            @meshPrevCtrlEnd.material = Materials.ctrl.highlight
            @meshPrevCtrlRod.material = Materials.ctrl.highlight
    
    activate: =>
        
        @meshPrevCtrlEnd.visible = true
        @meshPrevCtrlRod.visible = true
        @meshCtrlStart.visible = true
        @meshCtrlRod.visible = true
        
        world.addPickable @meshPrevCtrlEnd
        world.addPickable @meshCtrlStart
        
        world.showCompass @, @getPos(), @getDir() 
        
    deactivate: =>

        @meshPrevCtrlEnd.visible = false
        @meshPrevCtrlRod.visible = false
        @meshCtrlStart.visible = false
        @meshCtrlRod.visible = false
        
        world.removePickable @meshPrevCtrlEnd
        world.removePickable @meshCtrlStart
        
        world.hideCompass @
                
    # 0000000    00000000    0000000    0000000   
    # 000   000  000   000  000   000  000        
    # 000   000  0000000    000000000  000  0000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000   0000000   
    
    prevCtrlDist:  -> @prevCtrlEnd.distanceTo @curveStart
    ctrlStartDist: -> @ctrlStart.distanceTo @curveStart
    
    onDrag: (ray, hit) =>

        plane = new Plane
        plane.setFromNormalAndCoplanarPoint Vector.unitZ, @getPos()
        ray.intersectPlane plane, Vector.tmp
        Vector.tmp.round()
                    
        if hit.mesh.name == 'ctrlStart'
            
            z = @ctrlStart.z
            @ctrlStart.copy Vector.tmp
             
            dist = @ctrlStartDist()
            return if dist < 1
            if MIN_CTRL_DIST > dist
                @ctrlStart.sub @curveStart
                @ctrlStart.normalize()
                @ctrlStart.multiplyScalar MIN_CTRL_DIST
                @ctrlStart.add @curveStart
                 
            @ctrlStart.z = z
            @meshCtrlStart.position.copy @ctrlStart
             
            dist = @prevCtrlDist()
            @prevCtrlEnd.copy @ctrlStart
            @prevCtrlEnd.sub @curveStart
            @prevCtrlEnd.setLength -dist
            @prevCtrlEnd.add @curveStart
            @meshPrevCtrlEnd.position.copy @prevCtrlEnd
             
            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add @meshCurveStart.position
            @meshCurveStart.lookAt Vector.tmp
             
            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add @meshCtrlStart.position
            @meshCtrlStart.lookAt Vector.tmp

            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add @meshPrevCtrlEnd.position
            @meshPrevCtrlEnd.lookAt Vector.tmp

        if hit.mesh.name == 'prevCtrlEnd'
            
            z = @prevCtrlEnd.z
            @prevCtrlEnd.copy Vector.tmp
             
            dist = @prevCtrlEnd.distanceTo @curveStart
            return if dist < 1
            if MIN_CTRL_DIST > dist
                @prevCtrlEnd.sub @curveStart
                @prevCtrlEnd.normalize()
                @prevCtrlEnd.multiplyScalar MIN_CTRL_DIST
                @prevCtrlEnd.add @curveStart
                 
            @prevCtrlEnd.z = z
            @meshPrevCtrlEnd.position.copy @prevCtrlEnd
             
            dist = @ctrlStart.distanceTo @curveStart
            @ctrlStart.copy @prevCtrlEnd
            @ctrlStart.sub @curveStart
            @ctrlStart.setLength -dist
            @ctrlStart.add @curveStart
            @meshCtrlStart.position.copy @ctrlStart
             
            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add @meshCurveStart.position
            @meshCurveStart.lookAt Vector.tmp
             
            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add @meshCtrlStart.position
            @meshCtrlStart.lookAt Vector.tmp

            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add @meshPrevCtrlEnd.position
            @meshPrevCtrlEnd.lookAt Vector.tmp
            
        @curve.updateArcLengths()
        @dragCB?()
                
    compassRotated: (dir) => @setDir dir
                
    setDir: (dir) ->
        
        quat = Quaternion.unitVectors Vector.unitY, dir
        @group.quaternion.copy quat
        
        @meshCtrlStart.getWorldPosition @ctrlStart
        @meshPrevCtrlEnd?.getWorldPosition @prevCtrlEnd
        
        @curve.updateArcLengths()
        @dragCB?()
        
    # 00     00   0000000   000   000  00000000  
    # 000   000  000   000  000   000  000       
    # 000000000  000   000   000 000   0000000   
    # 000 0 000  000   000     000     000       
    # 000   000   0000000       0      00000000  
    
    moveStartTo: (point) ->
        
        delta = Vector.tmp.copy point
               
        delta.sub @curveStart
        @curveStart.add delta
        @ctrlStart.add delta
        @meshCtrlStart.position.copy @ctrlStart
            
        @curve.updateArcLengths()

    moveEndTo: (point) ->
        
        delta = Vector.tmp.copy point
               
        delta.sub @curveEnd
        @curveEnd.add delta
        @ctrlEnd.add delta
        
        @curve.updateArcLengths()
        
    compassMoved: (point) => @setPos point
    
    setPos: (point) ->
        
        delta = vec(point).minus @curveStart
        
        @curveStart.add delta
        @ctrlStart.add delta
        @prevCtrlEnd.add delta
        @group.position.copy @curveStart
        
        @curve.updateArcLengths()
        @dragCB?()

    getPos: -> @group.position
    getDir: -> vec(0 1 0).applyQuaternion @group.quaternion
        
        
    # 00000000    0000000   000000000   0000000   000000000  00000000  
    # 000   000  000   000     000     000   000     000     000       
    # 0000000    000   000     000     000000000     000     0000000   
    # 000   000  000   000     000     000   000     000     000       
    # 000   000   0000000      000     000   000     000     00000000  
    
    rotateStart: (dir) ->
        
        length = @ctrlStart.distanceTo @curveStart
        @ctrlStart.copy dir
        @ctrlStart.setLength length
        @ctrlStart.add @curveStart
        @curve.updateArcLengths()
        
    rotateEnd: (dir) ->
        
        length = @ctrlEnd.distanceTo @curveEnd
        @ctrlEnd.copy dir
        @ctrlEnd.setLength length
        @ctrlEnd.add @curveEnd
        @curve.updateArcLengths()
        
module.exports = CurveCtrl
