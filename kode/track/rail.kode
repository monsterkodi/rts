
BufferGeometry = THREE.BufferGeometry

class Rail extends BufferGeometry

    @: (curve, segments=64) ->

        super()
                    
        @type = 'Rail'

        frames = curve.computeFrenetFrames segments, false

        @tangents  = frames.tangents
        @normals   = frames.normals
        @binormals = frames.binormals

        vertex = vec()
        normal = vec()
        P      = vec()

        vertices = []
        indices  = []

        generateSegment = (i) =>

            P = curve.getPointAt i / segments, P

            N = frames.normals[i].clone().multiplyScalar 0.35
            B = frames.binormals[i].clone().multiplyScalar 0.35

            v = P.clone()
            v.add N
            v.add B
            vertices.push v.x, v.y, v.z
                
            v = P.clone()
            v.add N
            v.sub B
            vertices.push v.x, v.y, v.z
            
            v = P.clone()
            v.sub N
            v.sub B
            vertices.push v.x, v.y, v.z

            v = P.clone()
            v.sub N
            v.add B
            vertices.push v.x, v.y, v.z

            v = P.clone()
            v.add N
            v.add B
            vertices.push v.x, v.y, v.z
            
        generateIndices = ->

            for j in 1..segments
                for i in 1..4

                    a =  5 * ( j - 1 ) + ( i - 1 )
                    b =  5 * j + ( i - 1 )
                    c =  5 * j + i
                    d =  5 * ( j - 1 ) + i

                    indices.push a, b, d
                    indices.push b, c, d

        for i in 0..segments
            generateSegment i
            
        generateIndices()

        @setIndex indices
        @setAttribute 'position' new THREE.Float32BufferAttribute vertices, 3
        
        @computeVertexNormals()
        
        curve.updateArcLengths()

module.exports = Rail
