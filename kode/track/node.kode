###
000   000   0000000   0000000    00000000
0000  000  000   000  000   000  000     
000 0 000  000   000  000   000  0000000 
000  0000  000   000  000   000  000     
000   000   0000000   0000000    00000000
###

function Node

    @: (x, y, z, @name) ->
        
        @position = vec x, y, z
        @dir      = vec 0 1 0
        @up       = vec 0 0 1
        
        @inTracks  = []
        @outTracks = []
        @blockedTrains = []
        @blocks = []
        @gizmo = {}
        
        box = new THREE.BoxGeometry 2 1 2
        box.translate 0 0 0.75
        @gizmo.center = new THREE.Mesh box, Materials.node.gizmo.center
        @gizmo.center.onDrag = @onDrag
        @gizmo.center.name = 'node.center'
        # @gizmo.center.visible = false

        box = new THREE.BoxGeometry 1 1 1
        box.translate 0 0 0.75
        @gizmo.tangent = new THREE.Mesh box, Materials.node.gizmo.tangent
        @gizmo.tangent.position.copy @dir
        @gizmo.tangent.onDrag = @onDrag
        @gizmo.tangent.name = 'node.tangent'
        # @gizmo.tangent.visible = false
        
        @mesh = new THREE.Group
        @mesh.add @gizmo.center
        @mesh.add @gizmo.tangent
        @mesh.position.copy @position
        
    onDrag: (line, obj) =>

        plane = new THREE.Plane
        plane.setFromNormalAndCoplanarPoint Vector.unitZ, obj.getWorldPosition(Vector.tmp)
        plane.intersectLine line, Vector.tmp
        
        @position.copy Vector.tmp
        @mesh.position.copy @position
        
        @updateTracks()
        
        for i in 0...@blockedTrains.length
            
            block = @blocks[i]
            train = @blockedTrains[i]
            train.path.getPoint block.position, 3
            block.position.z += 0.75
        
        if @nodeBox
            @nodeBox.position.copy @position
            @nodeBox.position.z += 0.75
        
    updateTracks: ->
        
        for track in @outTracks
            track.updateNode @
        for track in @inTracks
            track.updateNode @
        
    rotate: (degree) ->

        quat = Quaternion.axisAngle @up, degree
        @dir.applyQuaternion quat
        @mesh.quaternion.copy quat
        
    setTrain: (@train) ->
        
        if @train 
            if not @nodeBox
                c1 = new CylinderGeometry 0.25 0.25 1 16
                c1.rotateX Math.PI/2
                c2 = new CylinderGeometry 0.25 0.25 1 16
                c2.rotateZ Math.PI/2
                geom = THREE.BufferGeometryUtils.mergeBufferGeometries [c1, c2]
                @nodeBox = new Mesh geom, @train.cars[0].mesh.material
                @nodeBox.position.copy @position
                @nodeBox.position.z += 0.75
                world.scene.add @nodeBox
            @nodeBox.material = @train.cars[0].mesh.material
            for block in @blocks
                block.material = @nodeBox.material
        
    block: (train) ->
        
        @blockedTrains.push train
        train.block()
        
        geom = THREE.BufferGeometryUtils.mergeBufferGeometries [new BoxGeometry(0.5 1 0.5), new BoxGeometry(1 0.5 0.5)]
        
        mesh = new Mesh geom, @train.cars[0].mesh.material
        train.path.getPoint mesh.position, 3
        mesh.position.z += 0.75
        train.path.getTangent Vector.tmp, 3
        Vector.tmp.add mesh.position
        mesh.lookAt Vector.tmp
        world.scene.add mesh
        @blocks.push mesh
        
    unblock: ->
        
        @setTrain null
        
        for t in @blockedTrains
            t.unblock()            
        
        for block in @blocks
            block.removeFromParent()
            
        @nodeBox.removeFromParent()
            
        delete @nodeBox
        @blockedTrains = []
        @blocks = []
        
module.exports = Node
