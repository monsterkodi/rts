###
000   000   0000000   0000000    00000000
0000  000  000   000  000   000  000     
000 0 000  000   000  000   000  0000000 
000  0000  000   000  000   000  000     
000   000   0000000   0000000    00000000
###

CurveCtrl = require './curvectrl'
Compass   = require './compass'

function Node

    @id:         0
    @clickMode:  false
    @skipCenter: false

    @: (cfg) ->
        
        Node.id++
        
        @name  = cfg.name ? "n#{Node.id}"
        @fixed = cfg.fixed ? false
        pos = vec cfg.pos
        
        @inTracks      = []
        @outTracks     = []
        @blockedTrains = []
        @blocks        = []
        @gizmo         = {}

        # adds @nodeBox to group in @setTrain!
        # adds meshes to @blocks in and trains to @blockedTrains in @blockTrain
        
        @group = new Group
        @group.name = @name
        @group.node = @
        @group.position.copy pos
        
        geom = Geom.cylinder height:0.71 radius:0.7 sgmt:32
        @center = new Mesh geom, Materials.node.center
        @center.name = @name + '.center'
        if not @fixed
            @center.onClick = @onClickCenter
            @center.onDoubleClick = @onDoubleClickCenter
            @center.onEnter = @onEnterCenter
            @center.onLeave = @onLeaveCenter
            @center.onDrag  = @onDrag
        
        geom = new CylinderGeometry 0.5 0.5 1 32
        geom.translate 0 0 -2
        geom.rotateX Math.PI/2
        
        @outMesh = new Mesh geom, Materials.node.out
        @outMesh.node       = @
        @outMesh.name       = @name + '.out'
        @outMesh.onDrag     = @onOutDrag
        @outMesh.onDragDone = @onDragDone
        @outMesh.onEnter    = @onEnterOut
        @outMesh.onLeave    = @onLeaveOut
        @outMesh.onClick    = @onClickInOut

        geom = new CylinderGeometry 0.5 0.5 1 32
        geom.translate 0 0 2
        geom.rotateX Math.PI/2
        
        @inMesh = new Mesh geom, Materials.node.in
        @inMesh.node       = @
        @inMesh.name       = @name + '.in'
        @inMesh.onDrag     = @onInDrag
        @inMesh.onDragDone = @onDragDone
        @inMesh.onEnter    = @onEnterIn
        @inMesh.onLeave    = @onLeaveIn
        @inMesh.onClick    = @onClickInOut
        
        @group.add @center
        @group.add @inMesh
        @group.add @outMesh

        label = world.addLabel text:@name, size:0.5 mono:true
        label.position.z = 0.5
        label.color = 0xffffff
        label.name = @name + '.label'
        @center.add label
        
        world.addPickable @group
        world.addObject   @group
        
        if cfg.dir
            @setDir cfg.dir
        else
            @rotate 0
        
        @group.toSave = @toSave
        @group.toSave.key = 'nodes'
        
    toSave: =>
        
        name:  @name
        out:   @outTracks.map (tr) -> tr.name
        in:    @inTracks.map  (tr) -> tr.name
        pos:   @group.position
        dir:   @getDir()
        fixed: @fixed
        
    del: =>
        
        if @group
            
            world.hideCompass @
            
            post.emit 'delNode' @
            
            for track in @allTracks()
                track.del()
                
            for block in @blocks
                world.removeObject block
            
            world.removeObject @group
            world.removePickable @group
            delete @group
        
    onDoubleClickCenter: =>
        
        if @inTracks.length == 1 and @outTracks.length == 1
            post.emit 'convertNodeToCtrl' @
        
    onClickCenter: =>
        
        if Node.skipCenter
            Node.skipCenter = false
            return
        if not Node.clickMode
            if world.compass.object == @
                world.hideCompass @
            else
                world.showCompass @, @getPos(), @getDir()
            
    onEnterIn:     => @inMesh.material  = Materials.node.highlightIn
    onLeaveIn:     => @inMesh.material  = Materials.node.in
    onEnterOut:    => @outMesh.material = Materials.node.highlightOut
    onLeaveOut:    => @outMesh.material = Materials.node.out
    
    onEnterCenter: => 
        @center.material = Materials.ctrl.highlight
        post.on 'delete' @del
        
    onLeaveCenter: (hit, nextHit, event) => 
        if event.buttons == 0
            @center.material = Materials.node.center
        post.removeListener 'delete' @del
        
    onClickInOut: (hit) => 

        return if Node.clickMode
        return if Node.skipCenter
        Node.clickMode = true
        
        @clickTracks = hit.name?.endsWith('.in') ? @inTracks : @outTracks

        if not @dragTrack
            @startDrag @clickTracks
        
        post.on 'mouseMove' @onMouseMove
        post.on 'mouseDown' @onMouseDown
        post.on 'mouseUp'   @onMouseUp
        
    onMouseMove: (hit, downHit) =>
        
        if Node.clickMode
            @moveInOutDrag hit, downHit
            
        if hitName = hit?.name
            # log hitName, @name
            if not hitName.startsWith(@name) and not hitName.startsWith @dragTrack.node[1].name
                if hitName.endsWith('.in') or hitName.endsWith('.out')
                    log "could connect #{@name + (@clickTracks == @inTracks ? '.in' : '.out')} to" hitName
        
    onMouseDown: (hit, downHit) =>
    onMouseUp: (hit, downHit) =>
        
        @onDragDone hit, downHit
        delete @clickTracks
        post.removeListener 'mouseMove' @onMouseMove
        post.removeListener 'mouseDown' @onMouseDown
        post.removeListener 'mouseUp'   @onMouseUp
        Node.skipCenter = true
        Node.clickMode = false
        
    # 0000000    00000000    0000000    0000000   
    # 000   000  000   000  000   000  000        
    # 000   000  0000000    000000000  000  0000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000   0000000   
    
    startDrag: (tracks) ->
        
        world.hideCompass @
        
        dir = @getDir()
        if tracks == @inTracks
            dir.negate()
        
        n1 = @
        n2 = world.addNode pos:@getPos().add dir
        
        n2.setDir dir
        
        c1 = dir.clone().scale( 5).add n1.getPos()
        c2 = dir.clone().scale(-5).add n2.getPos()
        t = world.addTrack n1, n2, [c1, c2]
                
        t.node[0] = n1
        t.node[1] = n2
        
        tracks.push t
        n2.inTracks.push t
        
        @dragTrack = t
        
    onInDrag: (hit, downHit) =>
        
        if not @dragTrack ➜ @startDrag @inTracks
            
        @moveInOutDrag hit, downHit
                    
    onOutDrag: (hit, downHit) =>
        
        if not @dragTrack ➜ @startDrag @outTracks

        @moveInOutDrag hit, downHit
            
    moveInOutDrag: (hit, downHit) ->
        
        ▴ @dragTrack
        ▴ @dragTrack.node
        ▴ @dragTrack.node[1]
        
        dragNode = @dragTrack.node[1]
            
        plane = new Plane
        plane.setFromNormalAndCoplanarPoint Vector.unitZ, @getPos()
        hit.ray.intersectPlane plane, Vector.tmp
        Vector.tmp.round()
        if Vector.tmp.distanceTo(@getPos()) > 300
            Vector.tmp.copy @getPos().to(Vector.tmp).setLength 300
            Vector.tmp.add @getPos()
        dragNode.group.position.copy Vector.tmp # setPos?
        @dragTrack.nodeMoved dragNode
        
        Vector.tmp1.copy @dragTrack.node[0].trackDir @dragTrack # dir at start node
        @dragTrack.node[0].getPos Vector.tmp2
        @dragTrack.node[1].getPos Vector.tmp3
        Vector.tmp3.sub(Vector.tmp2).normalize() # start node to end node
        dot = Vector.tmp1.dot Vector.tmp3 # negative if end node is 'behind' start node
        if dot <= 0
            @dragTrack.node[1].setDir Vector.tmp1.negate()
        else if dot > 0.75
            @dragTrack.node[1].setDir Vector.tmp1
        else
            @dragTrack.node[0].getRight Vector.tmp2
            dot = Vector.tmp2.dot Vector.tmp3
            if dot < 0 ➜ Vector.tmp2.negate()
            @dragTrack.node[1].setDir Vector.tmp2
        
    onDragDone: (hit, downHit) =>
        
        if hitName = hit?.name

            if @dragTrack and not hitName.startsWith(@name) and not hitName.startsWith @dragTrack.node[1].name
                
                isIn  = hitName.endsWith '.in'
                isOut = hitName.endsWith '.out'
                if isIn or isOut
                    if n2 = hit.mesh.node
                        # log "connect #{@name + (@clickTracks == @inTracks ? '.in' : '.out')} to" hitName
                        t2 = isIn ? n2.inTracks : n2.outTracks
                        on2 = @dragTrack.node[1]
                        on2.removeTrack @dragTrack
                        @dragTrack.node[1] = n2
                        on2.del()
                        t2.push @dragTrack
                        ctrl = @dragTrack.ctrls[-1]
                        ctrl.curve.v3.copy n2.getPos()
                        ctrl.curve.v2.copy n2.getDir().times(5)
                        if isIn ➜ ctrl.curve.v2.negate() 
                        ctrl.curve.v2.add n2.getPos()
                        @dragTrack.ctrlMoved()
        
        delete @dragTrack
            
    onDrag: (hit, downHit) =>

        world.hideCompass @
        plane = new Plane
        plane.setFromNormalAndCoplanarPoint Vector.unitZ, @getPos()
        hit.ray.intersectPlane plane, Vector.tmp
        Vector.tmp.round()
        @setPos Vector.tmp
        
    getPos: (p) => p ?= vec(); p.copy @group.position
    setPos: (point) ->
        
        @group.position.copy point
        
        for track in @outTracks
            track.nodeMoved @
        for track in @inTracks
            track.nodeMoved @
        
        for i in 0...@blockedTrains.length
            
            block = @blocks[i]
            train = @blockedTrains[i]
            train.path.getPoint block.position, 3
        
    # 00000000    0000000   000000000   0000000   000000000  00000000  
    # 000   000  000   000     000     000   000     000     000       
    # 0000000    000   000     000     000000000     000     0000000   
    # 000   000  000   000     000     000   000     000     000       
    # 000   000   0000000      000     000   000     000     00000000  
    
    onRotate: (hit, downHit, lastHit) =>

        point = vec()
        hit.mesh.getWorldPosition point
        plane = new Plane
        plane.setFromNormalAndCoplanarPoint Vector.unitZ, point
        lastHit.ray.intersectPlane plane, Vector.tmp
        hit.ray.intersectPlane plane, Vector.tmp2
        
        Vector.tmp.sub point
        Vector.tmp2.sub point
        angle = @getDir().angle(Vector.tmp2)-@getDir().angle(Vector.tmp)
        if angle
            @rotate Math.sign(@getDir().crossed(@getUp()).dot Vector.tmp) * -angle
            
    rotate: (degree) ->

        @setDir @getDir().applyQuaternion Quaternion.axisAngle @getUp(), degree
        
    compassRotated: (dir) => @setDir dir
        
    getUp:    (u) -> u ?= vec(); u.copy(Vector.unitZ).applyQuaternion @group.quaternion
    getDir:   (d) -> d ?= vec(); d.copy(Vector.unitY).applyQuaternion @group.quaternion
    getRight: (r) -> r ?= vec(); r.copy(Vector.unitX).applyQuaternion @group.quaternion
    setDir: (dir) ->
        
        quat = Quaternion.unitVectors Vector.unitY, dir
        @group.quaternion.copy quat
        
        for track in @outTracks
            track.nodeRotated @
        for track in @inTracks
            track.nodeRotated @
        
    # 000000000  00000000    0000000   000  000   000  
    #    000     000   000  000   000  000  0000  000  
    #    000     0000000    000000000  000  000 0 000  
    #    000     000   000  000   000  000  000  0000  
    #    000     000   000  000   000  000  000   000  
    
    setTrain: (train) ->
        
        return if train == @train
        @train = train
        # log @name, '▪' @train?.name
        
        if @train 
            if not @nodeBox
                c1 = new CylinderGeometry 0.25 0.25 1 16
                c1.rotateX Math.PI/2
                c2 = new CylinderGeometry 0.25 0.25 1.6 16
                c2.rotateZ Math.PI/2
                geom = Geom.merge c1, c2
                @nodeBox = new Mesh geom, @train.cars[0].mesh.material
                @group.add @nodeBox
            @nodeBox.material = @train.cars[0].mesh.material
            for block in @blocks
                block.material = @nodeBox.material
                
            @inMesh.scale.set 1 1 0.72
            @outMesh.scale.set 1 1 0.72
        else
            @inMesh.scale.set 1 1 1
            @outMesh.scale.set 1 1 1
        
    onRemoveTrain: (train) =>
        
        if train == @train
            @setTrain null
            
    # 0000000    000       0000000    0000000  000   000  
    # 000   000  000      000   000  000       000  000   
    # 0000000    000      000   000  000       0000000    
    # 000   000  000      000   000  000       000  000   
    # 0000000    0000000   0000000    0000000  000   000  
    
    blockTrain: (train) ->
        
        return if @blockedTrains.indexOf(train) >= 0
        
        @blockedTrains.push train
        train.block "node #{@name} owned by #{@train?.name}"
        
        geom = Geom.merge new BoxGeometry(0.5 1 0.5), new BoxGeometry(1 0.5 0.5)
        
        if @train
            mat = @train.cars[0].mesh.material
        else 
            log 'really?'
            mat = train.cars[0].mesh.material
        
        mesh = new Mesh geom, mat
        train.path.getPoint mesh.position, 3
        train.path.getTangent Vector.tmp, 3
        Vector.tmp.add mesh.position
        mesh.lookAt Vector.tmp
        world.addObject mesh
        @blocks.push mesh
        
    unblockTrain: (train) ->
        
        train.unblock()
        if (index = @blockedTrains.indexOf train) >= 0
            world.removeObject @blocks[index]
            @blocks.splice index, 1
            @blockedTrains.splice index, 1
                
    unblockAll: ->
        
        for t in @blockedTrains
            t.unblock()            
        
        for block in @blocks
            world.removeObject block
        
        @setTrain null
        
        @nodeBox.removeFromParent()
        delete @nodeBox
        
        @blockedTrains = []
        @blocks = []
        
    # 000000000  00000000    0000000    0000000  000   000  
    #    000     000   000  000   000  000       000  000   
    #    000     0000000    000000000  000       0000000    
    #    000     000   000  000   000  000       000  000   
    #    000     000   000  000   000   0000000  000   000  
    
    commonMode: ->
        
        inMode  = @tracksMode @inTracks
        outMode = @tracksMode @outTracks
        inMode == outMode ? inMode : 0
        
    tracksMode: (tracks) ->
        mode = 0
        for track in tracks
            trackMode = track.modeForNode @
            if mode != trackMode
                if mode == 0
                    mode = trackMode
                else if trackMode != 0
                    return 0
        mode
    
    trackDir: (track) -> 
    
        dir = @getDir Vector.tmp
        if track in @inTracks
            dir.negate()
        dir
    
    allTracks: -> @inTracks.concat @outTracks
    
    removeTrack: (track) ->
        
        tracks = @siblingTracks track
        if (i = tracks.indexOf(track)) >= 0
            tracks.splice i, 1
        
    siblingTracks: (track) ->
        
        if 
            track in @inTracks  ➜ @inTracks
            track in @outTracks ➜ @outTracks
                                ➜ log 'no siblingTracks' 
                                
    oppositeTracks: (track) ->
        if 
            track in @inTracks  ➜ @outTracks
            track in @outTracks ➜ @inTracks
                                ➜ log 'no oppositeTracks' 
        
module.exports = Node
