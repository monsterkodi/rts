###
 0000000   0000000   00     00  00000000    0000000    0000000   0000000
000       000   000  000   000  000   000  000   000  000       000     
000       000   000  000000000  00000000   000000000  0000000   0000000 
000       000   000  000 0 000  000        000   000       000       000
 0000000   0000000   000   000  000        000   000  0000000   0000000 
###

function Compass

    @: ->

        @dots = []

        @group = new Group
        @group.name = 'compass'
        
        geom = Geom.cylindonut 0.71 1.5 Math.sqrt(2)/2 32 
        @wheel = new Mesh geom, Materials.compass.wheel
        @wheel.onDrag = @onRotate
        @wheel.name = 'compass.wheel'
        @group.add @wheel
        
        geom = new CylinderGeometry 0.2 0.2 1.2 16
        geom.rotateX Math.PI/2
        geom.translate 0 1.16 0
        @head = new Mesh geom, Materials.compass.head
        @head.noHitTest = true
        @head.name = 'compass.head'
        @wheel.add @head
        
        post.on 'delete' @onDelete

        for i in 0...8
            geom = new CylinderGeometry 0.33 0.33 0.71*1.2 24
            geom.rotateX Math.PI/2
            geom.translate 0 1.1 0
            geom.rotateZ i * Math.PI/4
            dot = new Mesh geom, Materials.compass['dot' + i]
            dot.onDrag  = @onRotate
            dot.handler = @
            dot.name = "compass.dot#{i}"
            @dots.push dot
            @group.add dot
            
    onDelete: => @object?.del()
                    
    onRotate: (hit, downHit, lastHit) => 
        
        @clearHighlight()
        point = vec @group.position
        plane = new Plane
        plane.setFromNormalAndCoplanarPoint Vector.unitZ, point
        lastHit.ray.intersectPlane plane, Vector.tmp
        hit.ray.intersectPlane plane, Vector.tmp2
        
        Vector.tmp.sub point
        Vector.tmp2.sub point
        dir = @getDir()
        angle = dir.angle(Vector.tmp2)-dir.angle(Vector.tmp)
        if angle
            @rotateBy Math.sign(dir.crossed(@getUp()).dot Vector.tmp) * -angle
        
    rotateBy: (degree) ->

        @wheel.quaternion.multiply Quaternion.axisAngle @getUp(), degree
        @object?.compassRotated? @getDir()

    rotateTo: (degree) ->
    
        @wheel.quaternion.identity()
        @wheel.quaternion.copy Quaternion.axisAngle @getUp(), degree
        @object?.compassRotated? @getDir()
        
    setDir: (dir) ->
        
        @wheel.quaternion.copy Quaternion.unitVectors Vector.unitY, dir
        @object?.compassRotated? @getDir()
        
    getDir: -> vec(0 1 0).applyQuaternion @wheel.quaternion
    getUp:  -> vec(0 0 1).applyQuaternion @wheel.quaternion
    
    onEnter: (hit) => 
        
        if hit.name.startsWith 'compass.dot'
            dot = @dots[parseInt hit.name[-1]]
            dot.scale.set 1 1 1.2
            dot.material.emissive.copy dot.material.color
            
    onLeave: (hit) =>
        
        if hit.name.startsWith 'compass.dot'
            dot = @dots[parseInt hit.name[-1]]
            dot.scale.set 1 1 1
            dot.material.emissive.copy Colors.black
    
    onMouseDown: (hit, downHit) =>

        if hit.name.startsWith 'compass.dot'
            dotIndex = parseInt hit.name[-1]
            @dots[dotIndex].scale.set 1 1 1
            
    onMouseUp: (hit, downHit) =>
        
        @group.visible = true
        
    onClick: (hit, downHit) => 
        
        if hit.name.startsWith 'compass.dot'
            dotIndex = parseInt hit.name[-1]
            @dots[dotIndex].scale.set 1 1 1.2
            @rotateTo dotIndex * 360/8
        
    onDoubleClick: (hit, downHit) => 
    
        if hit.name == 'compass.center'
            @object?.compassCenterDoubleClicked?()
        else
            log 'onDoubleClick' hit

    clearHighlight: ->

        for dot in @dots
            dot.scale.set 1 1 1
            dot.material.emissive.copy Colors.black
                        
module.exports = Compass
