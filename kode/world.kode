###
000   000   0000000   00000000   000      0000000  
000 0 000  000   000  000   000  000      000   000
000000000  000   000  0000000    000      000   000
000   000  000   000  000   000  000      000   000
00     00   0000000   000   000  0000000  0000000  
###

Node      = require './track/node'
Track     = require './track/track'
Train     = require './train/train'
Engine    = require './train/engine'
Boxcar    = require './train/boxcar'
Compass   = require './track/compass'
Construct = require './construct'
Convert   = require './convert'
Traffic   = require './traffic'
Central   = require './station/central'

function World extends Convert
    
    @: (@scene) ->
                
        @trains = []
        
        window.world = @
        
        @traffic = new Traffic
        
        @timeSum = 0
        @pickables = []
                
        @construct = new Construct
        @construct.init()
        
        @compass = new Compass
        
        @addFloor()
        @setSpeed prefs.get 'speed' 1
                
    #  0000000   0000000   00     00  00000000    0000000    0000000   0000000  
    # 000       000   000  000   000  000   000  000   000  000       000       
    # 000       000   000  000000000  00000000   000000000  0000000   0000000   
    # 000       000   000  000 0 000  000        000   000       000       000  
    #  0000000   0000000   000   000  000        000   000  0000000   0000000   
    
    showCompass: (object, point, dir) ->
        
        if object and object != @compass.object

            @addObject   @compass.group
            @addPickable @compass.group
            @compass.object = null
            @compass.group.position.copy point
            @compass.setDir dir
            @compass.object = object
            
            s = clamp 1 6 rts.camera.dist/30
            @compass.group.scale.set s, s, s

    hideCompass: (object) =>
        
        if @compass.object == object or not object and @compass.object
            
            @removePickable @compass.group
            @removeObject   @compass.group
            @compass.object = null
        
    #  0000000  00000000   00000000   0000000   000000000  00000000  
    # 000       000   000  000       000   000     000     000       
    # 000       0000000    0000000   000000000     000     0000000   
    # 000       000   000  000       000   000     000     000       
    #  0000000  000   000  00000000  000   000     000     00000000  
    
    create: ->
        
    #  0000000  000      00000000   0000000   00000000   
    # 000       000      000       000   000  000   000  
    # 000       000      0000000   000000000  0000000    
    # 000       000      000       000   000  000   000  
    #  0000000  0000000  00000000  000   000  000   000  
    
    clear: ->
        
    #  0000000   0000000   00     00  00000000  00000000    0000000   
    # 000       000   000  000   000  000       000   000  000   000  
    # 000       000000000  000000000  0000000   0000000    000000000  
    # 000       000   000  000 0 000  000       000   000  000   000  
    #  0000000  000   000  000   000  00000000  000   000  000   000  
    
    setCamera: (cfg={dist:10, rotate:45, degree:45}) ->
        
        rts.camera.dist   = cfg.dist   ? 10
        rts.camera.rotate = cfg.rotate ? 45
        rts.camera.degree = cfg.degree ? 45
        if cfg.pos?
            rts.camera.focusOnPoint vec cfg.pos
        else if cfg.center
            rts.camera.focusOnPoint vec cfg.center
        rts.camera.update()
        
    #  0000000  00000000   00000000  00000000  0000000    
    # 000       000   000  000       000       000   000  
    # 0000000   00000000   0000000   0000000   000   000  
    #      000  000        000       000       000   000  
    # 0000000   000        00000000  00000000  0000000    
    
    setSpeed: (speedIndex) -> 
        
        @speedIndex = clamp 0, config.world.speed.length-1, speedIndex
        @speed = config.world.speed[@speedIndex]

        prefs.set 'speed'      @speedIndex
        post.emit 'worldSpeed' @speed, @speedIndex

    resetSpeed: -> @setSpeed 2
    incrSpeed:  -> @setSpeed @speedIndex + 1
    decrSpeed:  -> @setSpeed @speedIndex - 1
        
    #  0000000   000   000  000  00     00   0000000   000000000  00000000  
    # 000   000  0000  000  000  000   000  000   000     000     000       
    # 000000000  000 0 000  000  000000000  000000000     000     0000000   
    # 000   000  000  0000  000  000 0 000  000   000     000     000       
    # 000   000  000   000  000  000   000  000   000     000     00000000  
    
    animate: (delta) ->

        scaledDelta = delta * @speed
        
        @timeSum += scaledDelta
        @simulate scaledDelta
        post.emit 'tick'
        
    #  0000000  000  00     00  000   000  000       0000000   000000000  00000000  
    # 000       000  000   000  000   000  000      000   000     000     000       
    # 0000000   000  000000000  000   000  000      000000000     000     0000000   
    #      000  000  000 0 000  000   000  000      000   000     000     000       
    # 0000000   000  000   000   0000000   0000000  000   000     000     00000000  
    
    simulate: (scaledDelta) ->
        
        @traffic.simulate scaledDelta, @timeSum
        
        for train in @trains
            train.update scaledDelta, @timeSum            
        
    # 00000000  000       0000000    0000000   00000000   
    # 000       000      000   000  000   000  000   000  
    # 000000    000      000   000  000   000  0000000    
    # 000       000      000   000  000   000  000   000  
    # 000       0000000   0000000    0000000   000   000  
    
    addFloor: ->
        
        geom = new PlaneGeometry 1500 1500
        geom.translate 0 0 -0.75
        @floor = new Mesh geom, Materials.floor
        @floor.visible = prefs.get 'floor'
        @floor.name = 'floor'
        @scene.add @floor
        @pickables.push @floor
        
        geom = new PlaneGeometry 1500 1500
        geom.translate 0 0 0.2-0.75
        @shadowFloor = new Mesh geom, Materials.shadow
        @shadowFloor.receiveShadow = true
        @shadowFloor.name = 'shadow'
        @scene.add @shadowFloor
        
    # 000000000  00000000    0000000   000  000   000  
    #    000     000   000  000   000  000  0000  000  
    #    000     0000000    000000000  000  000 0 000  
    #    000     000   000  000   000  000  000  0000  
    #    000     000   000  000   000  000  000   000  
    
    addTrain: (speed = 1, name='train') ->

        train = new Train
            speed: speed
            
        train.name = name
            
        @traffic.addTrain train
        @trains.push train
        
        @addEngine train
        
        train

    addEngine: (train) ->
        
        engine = new Engine @construct.meshes.engine.clone()
            
        @scene.add engine.mesh
        @pickables.push engine.mesh
        
        train.addCar engine
        
        engine
        
    addBoxcar: (train, num=1) ->
        
        for n in 0...num
            boxcar = new Boxcar @construct.meshes.boxcar.clone()
                
            @scene.add boxcar.mesh
            @pickables.push boxcar.mesh
            
            train.addCar boxcar
            
    # 000000000  00000000    0000000    0000000  000   000  
    #    000     000   000  000   000  000       000  000   
    #    000     0000000    000000000  000       0000000    
    #    000     000   000  000   000  000       000  000   
    #    000     000   000  000   000   0000000  000   000  
    
    addNode: (point, name) ->
        
        node = new Node vec(point), name
        node
        
    connectNodes: (n1, n2, name) -> @connectNodeTracks n1, n1.outTracks, n2, n2.inTracks, name
        
    connectNodeTracks: (n1, n1Tracks, n2, n2Tracks, name="#{n1.name} -> #{n2.name}") ->
        
        s = n1.getPos().distanceTo n2.getPos()
        s *= 0.5
        
        d1 = n1.getDir()

        d1.scale s
        if n1Tracks != n1.outTracks
            d1.negate()
        d1.add n1.getPos()
        
        d2 = n2.getDir()
        d2.scale s
        if n2Tracks != n2.outTracks
            d2.negate()
        d2.add n2.getPos()
        
        m  = Vector.midPoint d1, d2

        f = 0.553
        c1 = Vector.midPoint n1.getPos(), d1, f
        c2 = Vector.midPoint m, d1, f
        c3 = Vector.midPoint m, d2, f
        c4 = Vector.midPoint n2.getPos(), d2, f
        
        t = @addTrack n1, n2, [c1, c2, m, c3, c4], name
                
        n1Tracks.push t
        n2Tracks.push t
        
        t
    
    addTrack: (n1, n2, ctrlPoints, name) ->
        
        points = [n1.getPos()]
        
        for point,index in ctrlPoints
            points.push point
            if index % 3 == 2
                points.push point
        
        points.push n2.getPos()
        
        track = new Track points, name
        track.node[0] = n1
        track.node[1] = n2
        track
        
    addCentral: (point) ->
        
        central = new Central vec(point), 'central'
        
    # 00000000    0000000    0000000  
    # 000   000  000   000  000       
    # 00000000   000   000  0000000   
    # 000        000   000       000  
    # 000         0000000   0000000   
        
    indexToPos: (index,pos) -> 
        pos.x = ( index      & 0b11111111)-128
        pos.y = ((index>>8 ) & 0b11111111)-128
        pos.z = ((index>>16) & 0b11111111)-128
        pos
        
    invalidPos: (pos) -> not @validPos pos
    validPos: (pos) -> 

        return false if pos.x > 127 or pos.x < -127
        return false if pos.y > 127 or pos.y < -127
        return false if pos.z > 127 or pos.z < -127
        return true
        
    roundPos: (v) -> 
        Vector.tmp.copy v
        Vector.tmp.rounded()
        
    # 00000000   000   0000000  000   000   0000000   0000000    000      00000000   0000000  
    # 000   000  000  000       000  000   000   000  000   000  000      000       000       
    # 00000000   000  000       0000000    000000000  0000000    000      0000000   0000000   
    # 000        000  000       000  000   000   000  000   000  000      000            000  
    # 000        000   0000000  000   000  000   000  0000000    0000000  00000000  0000000   
    
    addPickable: (mesh) ->
        
        if mesh not in @pickables
            @pickables.push mesh
        
    removePickable: (mesh) ->
        
        if mesh in @pickables
            @pickables.splice @pickables.indexOf(mesh), 1
        
    addObject: (mesh) ->
        
        @scene.add mesh
        
    removeObject: (mesh) ->
        
        mesh.removeFromParent()
            
module.exports = World
