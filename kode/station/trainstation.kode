###
000000000  00000000    0000000   000  000   000   0000000  000000000   0000000   000000000  000   0000000   000   000
   000     000   000  000   000  000  0000  000  000          000     000   000     000     000  000   000  0000  000
   000     0000000    000000000  000  000 0 000  0000000      000     000000000     000     000  000   000  000 0 000
   000     000   000  000   000  000  000  0000       000     000     000   000     000     000  000   000  000  0000
   000     000   000  000   000  000  000   000  0000000      000     000   000     000     000   0000000   000   000
###

ColorGrid = require '../lib/colorgrid'
Station = require './station'
Engine = require '../train/engine'
Boxcar = require '../train/boxcar'
Train  = require '../train/train'
GRID_SIZE = 3

function TrainStation extends Station

    @: (cfg) ->
        
        cfg.name ?= "T#{Station.id+1}"
        super cfg
        
        @train       = new Train
        @trainLength = 3
        @tailEngine  = false

        @building = world.construct.meshes.station.armbase.clone()
        @building.children[0].material = Materials.station.train
        @building.position.z = 6
        @group.add @building
        
        @docking = world.construct.meshes.station.docking.clone()
        @group.add @docking
        
        if cfg.node
            @node = world.nodeWithName cfg.node
        else
            @docking.getWorldPosition Vector.tmp
            @node = world.addNode pos:Vector.tmp, name:'n'+@name, fixed:true
            @node.setDir cfg.dir if cfg.dir
        
        @node.station = @

        @grid = new ColorGrid gridSize:GRID_SIZE, size:4
        @grid.quads.rotateX deg2rad 90
        @grid.quads.position.z = 6+2.5
        @grid.quads.position.y = -2.61
        @group.add @grid.quads
        
        @gridColumns = [[][][]]
        
        post.on 'centralStorage' @onCentralStorage
        
    resourceIndex: (resource) -> 1 + Object.keys(Colors.mining).indexOf resource
        
    onCentralStorage: (storage, resource) =>
        
        # log 'onCentralStorage' storage
        ri = @resourceIndex resource
        # log resource, ri
        if @gridColumns[ri-1].length < GRID_SIZE
            @gridColumns[ri-1].push ri
            @grid.setColumns @gridColumns
            storage[resource]--
            
        for column in @gridColumns
            if column.length < GRID_SIZE
                return
                
        @gridColumns = [[][][]]
        @grid.setColumns @gridColumns
        
        if @node.train != @train and not @node.train
            if @nextTrack = @calcNextTrack()
                @nextNode = @nextTrack.nodeOpposite @node
            else
                log 'no build track!'
                return
                
        if @hasSpaceForCar()
            @startCarProduction()
        else
            log 'no car space!'
            
    hasSpaceForCar: ->
        # log @train.cars.length, @train.tailDelta()
        @train.cars.length == 0 or @train.tailDelta() > 2

    calcNextTrack: ->
        
        nn = @node
        ot = nn.outTracks.length ? nn.outTracks : nn.inTracks
        mode = ot == nn.outTracks ? 1 : 2
        choices = []
        for nextTrack in ot
            nextNode  = nextTrack.nodeOpposite nn
            trackMode = nextTrack.modeForNode(nn) or 3
            if not (mode & trackMode)
                continue # track points in the wrong direction
            if nextTrack.hasExitBlockAtNode nn
                # log "#{nextTrack.name} exit blocked at node #{nn.name} blocking #{train.name}"
                continue
            nnopptrck = nextNode.oppositeTracks(nextTrack) ? []
            if nnopptrck.length
                choices.push [nextTrack, nextNode]
                
        if choices.length
            if choices.length == 1
                nextTrack = choices[0][0]
                nextNode  = choices[0][1]
            else
                tracks = choices.map (c) -> c[0]
                length = tracks.map (t) -> t.lastTrainDistance()
                total  = 0
                accum  = length.map (l) -> total += l
                randm  = randRange 0 total
                choice = 0
                while accum[choice] < randm âžœ choice++
                # log "#{choice+1}" randm.toFixed(1), accum.map (a) -> a.toFixed(1)
                nextTrack = choices[choice][0]
                nextNode  = choices[choice][1]
                
        nextTrack
        
    #  0000000   0000000   00000000   00000000   00000000    0000000   0000000    
    # 000       000   000  000   000  000   000  000   000  000   000  000   000  
    # 000       000000000  0000000    00000000   0000000    000   000  000   000  
    # 000       000   000  000   000  000        000   000  000   000  000   000  
    #  0000000  000   000  000   000  000        000   000   0000000   0000000    
    
    startCarProduction: ->
        
        if @train.cars.length == 0
            car = new Engine @train
        else if @train.cars.length == @trainLength-1 and @tailEngine
            car = new Engine @train
        else
            car = new Boxcar @train
        @train.addCar car

        if @train.cars.length == 1
            @train.path.addTrackNode @nextTrack, @nextNode
            @node.setTrain @train
            @nextTrack.addTrain @train
            @train.track = @nextTrack
            car.deadEye()
        else if @train.cars.length == @trainLength
            @train.setColorByName @train.colorName
            world.traffic.addTrain @train
            world.physics.addKinematicCar @train.cars[0]
            @train = new Train
            return
        else
            for c in @train.cars
                c.deadEye()
        
        if not @movingTrain
            world.addAnimation @moveTrain
        
    # 00     00   0000000   000   000  00000000  000000000  00000000    0000000   000  000   000  
    # 000   000  000   000  000   000  000          000     000   000  000   000  000  0000  000  
    # 000000000  000   000   000 000   0000000      000     0000000    000000000  000  000 0 000  
    # 000 0 000  000   000     000     000          000     000   000  000   000  000  000  0000  
    # 000   000   0000000       0      00000000     000     000   000  000   000  000  000   000  
    
    moveTrain: (scaledDelta, timeSum) =>

        # log scaledDelta, @train.tailDelta()
        
        advance = world.traffic.allowTrainAdvance @train, scaledDelta
        
        @train.advance advance
        
        if @train.tailDelta() < 4
            @movingTrain = true
            world.addAnimation @moveTrain
        else
            @movingTrain = false
        
module.exports = TrainStation
