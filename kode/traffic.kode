###
000000000  00000000    0000000   00000000  00000000  000   0000000
   000     000   000  000   000  000       000       000  000     
   000     0000000    000000000  000000    000000    000  000     
   000     000   000  000   000  000       000       000  000     
   000     000   000  000   000  000       000       000   0000000
###

NODE_DISTANCE    = 12
REAREND_DISTANCE = 6

function Traffic

    @: ->
        
        @nodes = []
        @trains = []
        @tracks = []
    
    simulate: (scaledDelta, timeSum) ->
        
        @nodeSignals()
        
    nodeSignals: ->
        
        for train in @trains
            path = train.path
            p = path.nextDistance()
            if p < NODE_DISTANCE                         # train is close to target node
                n = path.nextNode()
                if n.train != train                      # if node is not owned by train
                    if not n.train                       #      if node not occupied
                        n.setTrain train                 #          train occupies node 
                    else 
                        if train not in n.blockedTrains  # if train not alreay blocked by node
                            if train.path.currentTrack()  != n.train.tailTrack() and 
                                train.path.currentTrack() != n.train.prevTailTrack() and
                                train.path.nextTrack()    != n.train.tailTrack()
                                n.block train            #      train gets blocked
                            else 
                                if train.path.currentTrack() == n.train.prevTailTrack()
                                    n.setTrain train     # train is the new occupant
            
            tailDelta = train.tailDelta()
            s = path.prevDistanceAtDelta tailDelta
            if s > NODE_DISTANCE
                n = path.prevNodeAtDelta tailDelta
                if n.train == train
                    # log 'unblocks' n.name, train.name
                    n.unblock()
                            
    addNode:  (node)  -> @nodes.push  node
    addTrain: (train) -> @trains.push train
    addTrack: (track) -> @tracks.push track
        
    allowTrainAdvance: (train, advance) ->
        
        delta = train.path.delta+advance
        track = train.path.trackAtDelta delta
        for other in @trains
            continue if other == train
            if other.tailTrack() == track
                trainToOther = other.tailPrevDistance() - train.path.prevDistanceAtDelta(delta)
                # if train.name == 'red' then log 'rearend!' trainToOther, other.name, other.tailPrevDistance()
                if trainToOther >= 0 and trainToOther < REAREND_DISTANCE
                    # log 'rearend!' train.name, train.path.prevDistanceAtDelta(delta)
                    # log '   other' other.name, other.path.prevDistance()
                    # log 'rearend!' train.name, other.name, trainToOther
                    return 0
            else if other.prevTailTrack() == track
                trainToOther = other.tailPrevDistance() + train.path.nextDistanceAtDelta(delta)
                # if train.name == 'red' then log 'rearend2' trainToOther, other.name
                # if trainToOther < REAREND_DISTANCE
                    # log 'rearend2' train.name, other.name, trainToOther
                if trainToOther >= 0 and trainToOther < REAREND_DISTANCE
                    # log 'rearend!2!' train.name, train.path.prevDistanceAtDelta(delta)
                    # log '   other' other.name, other.path.prevDistance()
                    return 0
                
        advance

module.exports = Traffic
