###
00000000   000000000   0000000
000   000     000     000     
0000000       000     0000000 
000   000     000          000
000   000     000     0000000 
###

kxk = require 'kxk'

{ _, clamp, deg2rad, elem, first, last, post, prefs, rad2deg, randInt, randIntRange, stopEvent } = require 'kxk'

window.$            = kxk.$
window._            = _
window.post         = post
window.prefs        = prefs
window.randInt      = randInt
window.randIntRange = randIntRange
window.deg2rad      = deg2rad
window.rad2deg      = rad2deg
window.stopEvent    = stopEvent
window.first        = first
window.last         = last
window.elem         = elem

window.THREE        = require 'three'

expose = """
    Ray
    Mesh
    Line3
    Color
    Group
    Plane
    Matrix3
    Matrix4
    Sphere
    CurvePath
    BoxGeometry
    PlaneGeometry
    SphereGeometry
    CircleGeometry
    CylinderGeometry
    LineSegments
    QuadraticBezierCurve3
    CubicBezierCurve3
    """
    
for e in expose.split '\n'
    # log e, THREE[e]
    window[e] = THREE[e]
    
require 'three/examples/js/shaders/CopyShader'
require 'three/examples/js/shaders/SSAOShader'
require 'three/examples/js/shaders/LuminosityHighPassShader'
require 'three/examples/js/postprocessing/Pass'
require 'three/examples/js/postprocessing/ShaderPass'
require 'three/examples/js/postprocessing/EffectComposer'
require 'three/examples/js/postprocessing/RenderPass'
require 'three/examples/js/postprocessing/SSAOPass'
require 'three/examples/js/postprocessing/UnrealBloomPass'
require 'three/examples/js/math/SimplexNoise'
{ Text } = require 'troika-three-text'
window.Text = Text
{ EffectComposer, RenderPass, UnrealBloomPass, SSAOPass, SimplexNoise } = THREE

setShadow = -> @castShadow = @receiveShadow = true
setShadow.bind window.Mesh
window.Mesh.prototype.setShadow = setShadow
    
window.BufferGeometry  = THREE.BufferGeometry   # weird that THREE[e] doens't work 
window.BufferAttribute = THREE.BufferAttribute  # weird that THREE[e] doens't work 
    
window.Vector       = require './lib/vector'
window.Quaternion   = require './lib/quaternion'
window.Colors       = require './const/colors'
window.Materials    = require './const/materials'
window.Geom         = require './const/geometry'
window.playSound    = (o,n,c) -> rts.sound.play o,n,c
   
FPS        = require './lib/fps'
Info       = require './lib/info'
Debug      = require './lib/debug'
Sound      = require './lib/sound'
GridHelper = require './lib/gridhelper'
Config     = require './const/config'
Menu       = require './menu/menu'
World      = require './world/world'
Map        = require './world/map'
Camera     = require './lib/camera'
Node       = require './track/node'
CurveCtrl  = require './track/curvectrl'

tmpMatrix = new THREE.Matrix3

class RTS

    @: (@view) ->
        
        window.rts = @
        window.config = Config.default
                
        @sound = new Sound
        
        @fps = new FPS
        @paused = false
        @animations = []
        @worldAnimations = []
        
        @renderer = new THREE.WebGLRenderer()
        @renderer.setPixelRatio window.devicePixelRatio
        @renderer.setSize @view.clientWidth, @view.clientHeight
        
        @renderer.setClearColor Colors.menu.background     
        @renderer.shadowMap.enabled = true
        @renderer.shadowMap.type = THREE.PCFSoftShadowMap
          
        @camera = new Camera view:@view
        @scene  = new THREE.Scene()
        
        canvas = @renderer.domElement
        
        @initComposer()
        
        @view.appendChild @renderer.domElement
        
        @lightIntensityAmbient = 0.2
        @lightIntensityPlayer  = 0.2
        @lightIntensityShadow  = 0.5
        
        @lightAmbient = new THREE.AmbientLight 0xffffff, @lightIntensityAmbient
        @scene.add @lightAmbient
        
        @lightPlayer = new THREE.PointLight 0xffffff, @lightIntensityPlayer
        @lightPlayer.position.copy @player.camera.getPosition() if @player?
        @lightPlayer.position.copy @camera.position
        @scene.add @lightPlayer

        @lightShadow = new THREE.DirectionalLight 0xffffff, @lightIntensityShadow 
        @lightShadow.castShadow = true
        @lightShadow.position.set 100 0 100
        @lightShadow.target.position.set 0 0 0
        @lightShadow.shadow.mapSize.width  = 2*2048
        @lightShadow.shadow.mapSize.height = 2*2048
        @lightShadow.shadow.camera.near    = 0.5
        @lightShadow.shadow.camera.far     = 500
        @lightShadow.shadow.camera.left    = -50
        @lightShadow.shadow.camera.right   =  50
        @lightShadow.shadow.camera.top     =  50
        @lightShadow.shadow.camera.bottom  = -50
        @scene.add @lightShadow
        @lightShadowHelper = new THREE.DirectionalLightHelper @lightShadow, 5, new THREE.Color 0xffff00
        @lightShadowHelper.visible = false
        @scene.add @lightShadowHelper
        
        @shadowCameraHelper = new THREE.CameraHelper @lightShadow.shadow.camera
        @shadowCameraHelper.visible = false
        @scene.add @shadowCameraHelper
        
        @setBrightness prefs.get 'brightness' 1.0
                
        @gridHelper = new GridHelper 100
        @gridHelper.visible = prefs.get 'grid' false
        @scene.add @gridHelper
        
        @axesHelper = new THREE.AxesHelper 10
        @axesHelper.position.copy @camera.center
        @axesHelper.visible = false
        @axesHelper.material.depthWrite = false
        @axesHelper.material.depthTest = false
        @axesHelper.material.depthFunc = THREE.NeverDepth
        @scene.add @axesHelper
                        
        @arrowHelper = new THREE.ArrowHelper vec(0 0 1), @camera.center, 1, 0x8888ff
        @arrowHelper.visible = false
        @scene.add @arrowHelper

        @centerHelper = new THREE.ArrowHelper vec(0 0 1), @camera.center, 5, 0xff8888
        @centerHelper.visible = false
        @scene.add @centerHelper
                
        @mouse   = vec()
        @downPos = vec()
        
        @raycaster = new THREE.Raycaster()

        new Map @scene # sets window.world
                             
        if cam = prefs.get 'camera'
            world.setCamera cam

        @debug = new Debug
        if not prefs.get 'debug' 
            @debug.hide()
        
        @menu = new Menu
                
        document.addEventListener 'mousemove' @onMouseMove
        document.addEventListener 'mousedown' @onMouseDown
        document.addEventListener 'mouseup'   @onMouseUp
        document.addEventListener 'dblclick'  @onDblClick
                
        @lastAnimationTime = window.performance.now()
                
        world.create()
        @animationStep()
        
        @paused = prefs.get 'paused' false

    #  0000000   0000000   00     00  00000000    0000000    0000000  00000000  00000000   
    # 000       000   000  000   000  000   000  000   000  000       000       000   000  
    # 000       000   000  000000000  00000000   000   000  0000000   0000000   0000000    
    # 000       000   000  000 0 000  000        000   000       000  000       000   000  
    #  0000000   0000000   000   000  000         0000000   0000000   00000000  000   000  
    
    initComposer: ->
                
        size = @renderer.getDrawingBufferSize new THREE.Vector2()
        renderTarget = new THREE.WebGLRenderTarget size.width, size.height, samples:4
            
        @composer = new EffectComposer @renderer, renderTarget
        @composer.setPixelRatio window.devicePixelRatio
        @composer.setSize @view.clientWidth, @view.clientHeight
        @composer.addPass new RenderPass @scene, @camera
        
        resolution = new THREE.Vector2 @view.clientWidth, @view.clientHeight
        strength   = 0.8
        threshold  = 0.8
        radius     = 0
        bloomPass  = new UnrealBloomPass resolution, strength, radius, threshold
        @composer.addPass bloomPass
        
        # ssaoPass = new SSAOPass @scene, @camera, @view.clientWidth, @view.clientHeight
        # ssaoPass.output = 2
        # ssaoPass.setSize @view.clientWidth, @view.clientHeight
        # ssaoPass.minDistance  = 0.01
        # ssaoPass.maxDistance  = 0.3
        # ssaoPass.kernelRadius = 16
        # @composer.addPass ssaoPass
        
    # 0000000    00000000   000   0000000   000   000  000000000  000   000  00000000   0000000   0000000  
    # 000   000  000   000  000  000        000   000     000     0000  000  000       000       000       
    # 0000000    0000000    000  000  0000  000000000     000     000 0 000  0000000   0000000   0000000   
    # 000   000  000   000  000  000   000  000   000     000     000  0000  000            000       000  
    # 0000000    000   000  000   0000000   000   000     000     000   000  00000000  0000000   0000000   
    
    setBrightness: (@brightness) =>
        
        @brightness = clamp 0 1 @brightness
        c = Colors.clear.clone()
        c.multiplyScalar @brightness
        @renderer.setClearColor c
        @lightAmbient.intensity = @lightIntensityAmbient * @brightness
        @lightShadow.intensity  = @lightIntensityShadow  * @brightness
        @lightPlayer.intensity  = @lightIntensityPlayer  * @brightness
        post.emit 'brightness' @brightness
        prefs.set 'brightness' @brightness
        
    getBrightness:   => @brightness
    resetBrightness: => @setBrightness 1
    incrBrightness:  => @setBrightness @getBrightness() + 0.1
    decrBrightness:  => @setBrightness @getBrightness() - 0.1
        
    #  0000000   000   000  000  00     00   0000000   000000000  00000000  
    # 000   000  0000  000  000  000   000  000   000     000     000       
    # 000000000  000 0 000  000  000000000  000000000     000     0000000   
    # 000   000  000  0000  000  000 0 000  000   000     000     000       
    # 000   000  000   000  000  000   000  000   000     000     00000000  
    
    animate: (func) ->
        
        @animations.push func
        
    deanimate: (func) ->
        
        if (index = @animations.indexOf func) >= 0
            @animations.splice index, 1
        
    animateWorld: (func) ->
        
        @worldAnimations.push func
        
    togglePause: -> 
    
        @paused = not @paused
        prefs.set 'paused' @paused
        post.emit 'pause' @paused
    
    animationStep: =>
        
        now = window.performance.now()
        delta = (now - @lastAnimationTime) * 0.001
        @lastAnimationTime = now
        
        oldAnimations = @animations.clone()
        @animations = []
        for animation in oldAnimations
            animation delta
        
        @menu.animate delta
         
        if not @paused
                    
            world.animate delta
            
            angle = -delta*0.5*world.speed
            @lightShadow.position.applyQuaternion Quaternion.axisAngle Vector.unitZ, angle
            @lightShadowHelper.update()   
             
            oldWorldAnimations = @worldAnimations.clone()
            @worldAnimations = []
            for animation in oldWorldAnimations
                animation delta * world.speed
                    
        @render()

        window.requestAnimationFrame @animationStep
            
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouseDown: (event) =>
        
        @calcMouse event
        @downPos.copy @mouse
        @camMove = event.button != 1
        
        if @downHit = @castRay()
        
            if event.buttons == 1
                if @downHit.mesh?.handler?.onMouseDown is func
                    @downHit.mesh.handler.onMouseDown @downHit, @downHit
                
        post.emit 'mouseDown' @downRay, @downHit
            
    onMouseUp: (event) =>

        @calcMouse event
                 
        hit = @castRay()
        
        if @downHit?.mesh?.onDragDone is func
            @downHit.mesh.onDragDone hit, @downHit
        
        if @downHit?.mesh?.handler?.onMouseUp is func
            @downHit.mesh.handler.onMouseUp hit, @downHit
                    
        post.emit 'mouseUp' hit, @downHit
        
        moved = @downPos.dist @mouse
        if moved < 0.001
            @onClick event
        if moved < 0.01
            if event.button != 0
                @focusOnHit()
        
        Node.skipCenter = false
                
        delete @camMove
        # keep downHit!
        
    onMouseMove: (event) =>

        @calcMouse event
                
        if hit = @castRay()

            if event.buttons == 1
                if @downHit?.mesh?.onDrag is func
                    @downHit.mesh.onDrag hit, @downHit, @lastHit
            
            post.emit 'mouseMove' hit, @downHit, @lastHit
            
            if @lastHit?.mesh != hit.mesh 
                if @lastHit?.mesh?.onLeave is func
                    @lastHit.mesh.onLeave hit, @downHit
                else if @lastHit?.mesh?.handler?.onLeave is func
                    @lastHit.mesh.handler.onLeave hit, @downHit
                if hit.mesh?.onEnter is func
                    hit.mesh.onEnter hit, @downHit
                else if hit.mesh?.handler?.onEnter is func
                    hit.mesh.handler.onEnter hit, @downHit
                    
            @lastHit = hit
                
    onClick: (event) => 
        
        if hit = @castRay()
            if hit.mesh?.onClick is func
                if @downHit.mesh == hit.mesh
                    hit.mesh.onClick hit
            else if hit.mesh?.handler?.onClick is func
                if @downHit.mesh == hit.mesh
                    hit.mesh.handler.onClick hit
            else if hit.name == 'floor'
                world.hideCompass()
                CurveCtrl.deactivateAll()
            else
                log 'unhandled click' hit
                
            post.emit 'mouseClick' hit # not used?
        
    onDblClick: (event) => 
        
        if hit = @castRay()
            
            if hit.mesh?.onDoubleClick is func
                hit.mesh.onDoubleClick hit
            else if hit.mesh?.handler?.onDoubleClick is func
                hit.mesh.handler.onDoubleClick hit
            else
                log 'unhandled doubleClick' hit
                            
    calcMouse: (event) ->
        
        br = @view.getBoundingClientRect()
        @mouse.x =  ((event.clientX - 6) / br.width) * 2 - 1
        @mouse.y = -((event.clientY - br.top) / br.height ) * 2 + 1
        @mouse
        
    focusOnHit: ->

        if hit = @castRay()
            @camera.fadeToPoint hit.point
            @centerHelper.setDirection hit.norm
            @centerHelper.position.copy hit.point
            @axesHelper.position.copy hit.point
            
    #  0000000   0000000    0000000  000000000  00000000    0000000   000   000  
    # 000       000   000  000          000     000   000  000   000   000 000   
    # 000       000000000  0000000      000     0000000    000000000    00000    
    # 000       000   000       000     000     000   000  000   000     000     
    #  0000000  000   000  0000000      000     000   000  000   000     000     
    
    castRay: ->

        @raycaster.setFromCamera @mouse, @camera
        intersects = @raycaster.intersectObjects world.pickables, true

        intersects = intersects.filter (i) -> i.object.noHitTest != true
        intersect = intersects[0]
        
        return if not intersect
        
        # log intersect.object.name
        
        point = intersect.point
        norm  = intersect.face.normal.clone()
        
        tmpMatrix.getNormalMatrix intersect.object.matrixWorld
        norm.applyMatrix3 tmpMatrix
        
        @arrowHelper.setDirection norm
        @arrowHelper.position.copy point
        
        ray = new Ray @camera.position, vec(@camera.position).to(point).normalize()
        
        info = 
            name:   intersect.object.name
            point:  point
            norm:   norm
            dist:   intersect.distance
            mesh:   intersect.object
            ray:    ray
                    
        info
        
    # 00000000   00000000  000   000  0000000    00000000  00000000   
    # 000   000  000       0000  000  000   000  000       000   000  
    # 0000000    0000000   000 0 000  000   000  0000000   0000000    
    # 000   000  000       000  0000  000   000  000       000   000  
    # 000   000  00000000  000   000  0000000    00000000  000   000  
    
    render: ->

        @lightPlayer.position.copy @camera.position
        @renderer.render world.scene, @camera
        @composer.render()
        
        @fps.draw()
        
        if prefs.get 'info'
            @info ?= new Info
            @info.draw()
        else if @info?
            @info.del()
            delete @info
            
    # 00000000   00000000   0000000  000  0000000  00000000  0000000  
    # 000   000  000       000       000     000   000       000   000
    # 0000000    0000000   0000000   000    000    0000000   000   000
    # 000   000  000            000  000   000     000       000   000
    # 000   000  00000000  0000000   000  0000000  00000000  0000000  
    
    resized: (w,h) ->
        
        @renderer.setSize w, h
        @composer.setSize w, h
        
        @camera.aspect = w/h
        @camera.size.set w, h
        @camera.updateProjectionMatrix()
        
module.exports = RTS
