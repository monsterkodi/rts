###
00000000   000000000   0000000
000   000     000     000     
0000000       000     0000000 
000   000     000          000
000   000     000     0000000 
###

kxk = require 'kxk'

{ _, deg2rad, elem, first, last, post, prefs, rad2deg, randInt, randIntRange, stopEvent } = require 'kxk'

window.$            = kxk.$
window._            = _
window.post         = post
window.prefs        = prefs
window.randInt      = randInt
window.randIntRange = randIntRange
window.deg2rad      = deg2rad
window.rad2deg      = rad2deg
window.stopEvent    = stopEvent
window.first        = first
window.last         = last
window.elem         = elem

window.THREE                 = require 'three'
window.Ray                   = THREE.Ray
window.Mesh                  = THREE.Mesh
window.Line3                 = THREE.Line3
window.Group                 = THREE.Group
window.Plane                 = THREE.Plane
window.Sphere                = THREE.Sphere
window.BoxGeometry           = THREE.BoxGeometry
window.PlaneGeometry         = THREE.PlaneGeometry
window.SphereGeometry        = THREE.SphereGeometry
window.CylinderGeometry      = THREE.CylinderGeometry
window.QuadraticBezierCurve3 = THREE.QuadraticBezierCurve3
window.CubicBezierCurve3     = THREE.CubicBezierCurve3
window.merge = ->
    THREE.BufferGeometryUtils.mergeBufferGeometries.apply null, [arguments]
    
window.Vector       = require './lib/vector'
window.Quaternion   = require './lib/quaternion'
window.Color        = require './const/color'
window.Geometry     = require './const/geometry'
window.Materials    = require './const/materials'
window.playSound    = (o,n,c) -> rts.sound.play o,n,c
   
FPS     = require './lib/fps'
Info    = require './lib/info'
Debug   = require './lib/debug'
Sound   = require './lib/sound'
Config  = require './const/config'
Menu    = require './menu/menu'
World   = require './world'
Map     = require './map'
Camera  = require './lib/camera'
Node    = require './track/node'
CurveCtrl = require './lib/curvectrl'

tmpMatrix = new THREE.Matrix3

class RTS

    @: (@view) ->
        
        window.rts = @
        window.config = Config.default
                
        @sound = new Sound
        
        @fps = new FPS
        @paused = false
        @animations = []
        @worldAnimations = []
        
        @renderer = new THREE.WebGLRenderer antialias: true
        @renderer.setPixelRatio window.devicePixelRatio

        @renderer.setClearColor Color.menu.background     
        @renderer.setSize @view.clientWidth, @view.clientHeight
        @renderer.shadowMap.enabled = true
        @renderer.shadowMap.type = THREE.PCFSoftShadowMap
        
        # log @renderer.capabilities
        
        @view.appendChild @renderer.domElement
        
        @camera = new Camera view:@view
                
        @scene = new THREE.Scene()
                
        @lightIntensityAmbient = 0.2
        @lightIntensityPlayer  = 0.2
        @lightIntensityShadow  = 0.5
        
        @lightAmbient = new THREE.AmbientLight 0xffffff, @lightIntensityAmbient
        @scene.add @lightAmbient
        
        @lightPlayer = new THREE.PointLight 0xffffff, @lightIntensityPlayer
        @lightPlayer.position.copy @player.camera.getPosition() if @player?
        @lightPlayer.position.copy @camera.position
        @scene.add @lightPlayer

        @lightShadow = new THREE.DirectionalLight 0xffffff, @lightIntensityShadow 
        @lightShadow.castShadow = true
        @lightShadow.position.set 100 0 100
        @lightShadow.target.position.set 0 0 0
        @lightShadow.shadow.mapSize.width  = 2*2048
        @lightShadow.shadow.mapSize.height = 2*2048
        @lightShadow.shadow.camera.near    = 0.5
        @lightShadow.shadow.camera.far     = 500
        @lightShadow.shadow.camera.left    = -50
        @lightShadow.shadow.camera.right   =  50
        @lightShadow.shadow.camera.top     =  50
        @lightShadow.shadow.camera.bottom  = -50
        @scene.add @lightShadow
        @lightShadowHelper = new THREE.DirectionalLightHelper @lightShadow, 5, new THREE.Color 0xffff00
        @lightShadowHelper.visible = false
        @scene.add @lightShadowHelper
        
        @shadowCameraHelper = new THREE.CameraHelper @lightShadow.shadow.camera
        @shadowCameraHelper.visible = false
        @scene.add @shadowCameraHelper
        
        @setBrightness prefs.get 'brightness' 1.0
        
        new Map @scene # sets window.world
                             
        if cam = prefs.get 'camera'
            world.setCamera cam
        
        @gridHelper = new THREE.GridHelper 100, 100, 0x444444, 0x111111
        @gridHelper.rotateX deg2rad 90
        @gridHelper.position.set 0 0 0.1
        @gridHelper.visible = false
        @scene.add @gridHelper
        
        @axesHelper = new THREE.AxesHelper 10
        @axesHelper.position.copy @camera.center
        @axesHelper.visible = false
        @axesHelper.material.depthWrite = false
        @axesHelper.material.depthTest = false
        @axesHelper.material.depthFunc = THREE.NeverDepth
        @scene.add @axesHelper
                
        @arrowHelper = new THREE.ArrowHelper vec(0 0 1), @camera.center, 1, 0x8888ff
        @arrowHelper.visible = false
        @scene.add @arrowHelper

        @centerHelper = new THREE.ArrowHelper vec(0 0 1), @camera.center, 5, 0xff8888
        @centerHelper.visible = false
        @scene.add @centerHelper
                
        @mouse   = vec()
        @downPos = vec()
        
        @raycaster = new THREE.Raycaster()

        @debug = new Debug
        if not prefs.get 'debug' 
            @debug.hide()
        
        @menu = new Menu
                
        document.addEventListener 'mousemove' @onMouseMove
        document.addEventListener 'mousedown' @onMouseDown
        document.addEventListener 'mouseup'   @onMouseUp
        document.addEventListener 'dblclick'  @onDblClick
                
        @lastAnimationTime = window.performance.now()
                
        world.create()
        @animationStep()
        
        @paused = prefs.get 'paused' false

    # 0000000    00000000   000   0000000   000   000  000000000  000   000  00000000   0000000   0000000  
    # 000   000  000   000  000  000        000   000     000     0000  000  000       000       000       
    # 0000000    0000000    000  000  0000  000000000     000     000 0 000  0000000   0000000   0000000   
    # 000   000  000   000  000  000   000  000   000     000     000  0000  000            000       000  
    # 0000000    000   000  000   0000000   000   000     000     000   000  00000000  0000000   0000000   
    
    setBrightness: (@brightness) =>
        
        c = Color.clear.clone()
        c.multiplyScalar @brightness
        @renderer.setClearColor c
        @lightAmbient.intensity = @lightIntensityAmbient * @brightness
        @lightShadow.intensity = @lightIntensityShadow * @brightness
        @lightPlayer.intensity = @lightIntensityPlayer * @brightness
        post.emit 'brightness' @brightness
        prefs.set 'brightness' @brightness
        
    getBrightness: =>
        
        return @brightness
        
    resetBrightness: =>
        
        @setBrightness 1
        
    incrBrightness: =>
        
        @setBrightness @getBrightness() + 0.1

    decrBrightness: =>
        
        @setBrightness @getBrightness() - 0.1
        
    #  0000000   000   000  000  00     00   0000000   000000000  00000000  
    # 000   000  0000  000  000  000   000  000   000     000     000       
    # 000000000  000 0 000  000  000000000  000000000     000     0000000   
    # 000   000  000  0000  000  000 0 000  000   000     000     000       
    # 000   000  000   000  000  000   000  000   000     000     00000000  
    
    animate: (func) ->
        
        @animations.push func
        
    animateWorld: (func) ->
        
        @worldAnimations.push func
        
    togglePause: -> 
    
        @paused = not @paused
        prefs.set 'paused' @paused
        post.emit 'pause' @paused
    
    animationStep: =>
        
        now = window.performance.now()
        delta = (now - @lastAnimationTime) * 0.001
        @lastAnimationTime = now
        
        oldAnimations = @animations.clone()
        @animations = []
        for animation in oldAnimations
            animation delta
        
        @menu.animate delta
         
        if not @paused
            
            world.animate delta
            
            angle = -delta*0.5*world.speed
            @lightShadow.position.applyQuaternion Quaternion.axisAngle Vector.unitZ, angle
            @lightShadowHelper.update()   
             
            oldWorldAnimations = @worldAnimations.clone()
            @worldAnimations = []
            for animation in oldWorldAnimations
                animation delta * world.speed
                    
        @render()

        window.requestAnimationFrame @animationStep
            
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouseDown: (event) =>
        
        @calcMouse event
        @downPos.copy @mouse
        @camMove = event.button != 1
        
        @downHit = @castRay()
        @downRay = @mouseRay()
        @lastRay = @mouseRay()

        if @downHit?.name == 'floor' and event.buttons == 1
            Node.clearActive()
            CurveCtrl.clearActive()
            
    onMouseUp: (event) =>

        if @downHit?.mesh?.onDragDone is func
            @downHit.mesh.onDragDone @mouseRay(), @downHit, @downRay, @lastRay
        
        delete @camMove
        delete @downHit
        delete @downRay
        delete @lastRay
        
        @calcMouse event

        moved = @downPos.dist @mouse
        if moved < 0.01
            if event.button != 0
                @focusOnHit()
                    
    onMouseMove: (event) =>

        @calcMouse event
        hit = @castRay() # to update arrowHelper
        
        if event.buttons == 1
            if @downHit?.mesh?.onDrag is func
                mouseRay = @mouseRay()
                @downHit.mesh.onDrag @mouseRay(), @downHit, @downRay, @lastRay
                @lastRay = mouseRay
        else if event.buttons == 0 and hit
            if hit.mesh?.onHover is func
                hit.mesh.onHover()
        
    onDblClick: (event) => 
        
        log 'doubleClick' hit = @castRay()
        if hit.mesh?.handler?.onDoubleClick is func
            hit.mesh?.handler?.onDoubleClick @mouseRay()
                            
    calcMouse: (event) ->
        
        br = @view.getBoundingClientRect()
        @mouse.x =  ((event.clientX - 6) / br.width) * 2 - 1
        @mouse.y = -((event.clientY - br.top) / br.height ) * 2 + 1
        @mouse
        
    focusOnHit: ->

        if hit = @castRay()
            @camera.fadeToPoint hit.point
            @centerHelper.setDirection hit.norm
            @centerHelper.position.copy hit.point
            @axesHelper.position.copy hit.point
            
    mouseRay: ->
        
        new Ray @camera.position, vec(@mouse.x, @mouse.y, 1).unproject(@camera).normalize()

    #  0000000   0000000    0000000  000000000  00000000    0000000   000   000  
    # 000       000   000  000          000     000   000  000   000   000 000   
    # 000       000000000  0000000      000     0000000    000000000    00000    
    # 000       000   000       000     000     000   000  000   000     000     
    #  0000000  000   000  0000000      000     000   000  000   000     000     
    
    castRay: ->

        @raycaster.setFromCamera @mouse, @camera
        intersects = @raycaster.intersectObjects world.pickables, true

        intersect = intersects[0]
        
        return if not intersect
        
        point = intersect.point
        norm  = intersect.face.normal.clone()
        
        tmpMatrix.getNormalMatrix intersect.object.matrixWorld
        norm.applyMatrix3 tmpMatrix
        
        @arrowHelper.setDirection norm
        @arrowHelper.position.copy point
        
        info = 
            name:   intersect.object.name
            point:  point
            norm:   norm
            dist:   intersect.distance
            mesh:   intersect.object
        
        @scene.remove @cursor if @cursor
        delete @cursor
            
        info
        
    # 00000000   00000000  000   000  0000000    00000000  00000000   
    # 000   000  000       0000  000  000   000  000       000   000  
    # 0000000    0000000   000 0 000  000   000  0000000   0000000    
    # 000   000  000       000  0000  000   000  000       000   000  
    # 000   000  00000000  000   000  0000000    00000000  000   000  
    
    render: ->

        @lightPlayer.position.copy @camera.position
        @renderer.render world.scene, @camera
        
        @fps.draw()
        
        return if @paused

        if prefs.get 'info'
            @info = new Info if not @info
            @info.draw()
        else if @info?
            @info.del()
            delete @info
            
    # 00000000   00000000   0000000  000  0000000  00000000  0000000  
    # 000   000  000       000       000     000   000       000   000
    # 0000000    0000000   0000000   000    000    0000000   000   000
    # 000   000  000            000  000   000     000       000   000
    # 000   000  00000000  0000000   000  0000000  00000000  0000000  
    
    resized: (w,h) ->
        
        @camera.aspect = w/h
        @camera.size = vec w,h
        @camera.updateProjectionMatrix()
        @renderer.setSize w,h
        
module.exports = RTS
