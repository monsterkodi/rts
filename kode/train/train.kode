
Path = require '../track/path'
Engine = require './engine'

function Train
    
    @numTrains: 0

    @: (@cfg) ->
        
        Train.numTrains++
        @name     = (@cfg.name ? "T") + Train.numTrains
        @path     = new Path @
        @speed    = @cfg.speed ? 1
        @topSpeed = @speed
        @cars     = []
        
    isOneWay: -> return not (@cars[-1] instanceof Engine)
        
    addCar: (car) ->
        
        @cars.push car
        car.mesh.name = @name + ".car#{@cars.length-1}"
        car
        
    setColor: (color) ->
        
        for car in @cars
            car.setColor color
            
    setColorByName: (name) ->
        
        for car in @cars
            car.setColorByName name
            
    addPreview: ->
        
        @preview = @cars[0].mesh.clone()
        @preview.material = Materials.misc.transparent
        for c in @preview.children
            c.material = Materials.misc.transparent
        world.scene.add @preview
        
    block:   -> @speed = 0
    unblock: -> @speed = @topSpeed
    
    tailDelta:     -> @path?.normDelta @path.delta-4.2*(@cars.length-1)
    tailTrack:     -> @path?.trackAtDelta @tailDelta()
    prevTailTrack: -> @path?.tracks[@path.normIndex @path.indexAtDelta(@tailDelta())-1]
    tailPrevDistance: -> @path?.prevDistance @tailDelta()
                
    update: (delta, timeSum) ->
        
        return if not @path

        advance = delta * @speed
        
        advance = world.traffic.allowTrainAdvance @, advance
        
        @path.advance advance
                
        for car, index in @cars
            car.update delta, timeSum, @
            car.moveToPathDelta @path, -4.2*index
            
        if @preview
            #@path.moveMesh @preview, 8
            # log @path.delta, @path.currentIndex(), @path.nextNode().name
            @preview.position.copy @path.nextNode().position
            # @preview.needsUpdate = true
                        
module.exports = Train
