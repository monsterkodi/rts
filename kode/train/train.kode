
Path   = require './path'
Engine = require './engine'
Boxcar = require './boxcar'

function Train
    
    @carDist:   4.2
    @numTrains: 0

    @: (@cfg) ->
        
        Train.numTrains++
        @name       = (@cfg.name ? "T") + Train.numTrains
        @path       = new Path @
        @speed      = @cfg.speed ? 1
        @topSpeed   = @speed
        @advanceFactor = 1
        @cars       = []
        @track      = null
        @resource   = blood:true water:true stuff:true
        
        @mesh       = new Mesh Geom.cylinder(radius:0.5, height:0.2), Materials.train.window
        @mesh.train = @
        @mesh.name  = @name
        @mesh.visible = false
        
        @mesh.toSave     = @toSave
        @mesh.toSave.key = 'trains'
        
        colors = Object.keys Colors.train
        @setColorByName colors[Train.numTrains % colors.length]
        
        world.addObject @mesh
                
    #  0000000   0000000   000   000  00000000  
    # 000       000   000  000   000  000       
    # 0000000   000000000   000 000   0000000   
    #      000  000   000     000     000       
    # 0000000   000   000      0      00000000  
    
    toSave: =>

        name:     @name
        speed:    @speed
        track:    @track?.name
        prevDist: @path.prevDistance()
        node:     @path.nextNode().name
        resource: @resource
        path:     @path.toSave()
        color:    @colorName
        cars:     @cars.map (c) -> c.toSave()
        
    del: ->
        
        @removeFromTrack()
        for car in @cars
            car.del()
        @cars = []
        world.removeObject @mesh

    explode: -> 
    
        @removeFromTrack()
        world.physics.addTrain @
        
    removeFromTrack: ->
        
        for track in world.allTracks()
            track.onRemoveTrain @

        for node in world.allNodes()
            node.onRemoveTrain @
            
        world.traffic.subTrain @
        world.physics.removeKinematicCar @cars[0]
        
        for car in @cars
            car.deadEye()
        
        delete @mesh.toSave
        if @track
            @track.subTrain @
            @track = null
        
    isOneWay: -> return not (@cars[-1] instanceof Engine)
    
    reverse: ->
        
        if not @isOneWay()
        
            @path.delta = @path.getLength() - @tailDelta()
            @path.reverse()
            head = @cars.shift()
            tail = @cars.pop()
            @cars.unshift tail
            @cars.push head
            
        else
            warn 'cant reverse oneWay train!'
        
    #  0000000   0000000   00000000   
    # 000       000   000  000   000  
    # 000       000000000  0000000    
    # 000       000   000  000   000  
    #  0000000  000   000  000   000  
    
    addCar: (car) ->
        
        @cars.push car
        car.index = @cars.length-1
        car.name = @name + ".#{car.constructor.name[0]}#{car.index}"
        car.mesh.name = car.name
        car.setColorByName @colorName
        car
        
    boxcars: -> @cars.filter (c) -> c instanceof Boxcar
        
    setColor: (color) ->
        
        for car in @cars
            car.setColor color
            
    setColorByName: (name) ->
        
        @colorName = name
        for car in @cars
            car.setColorByName name
                    
    block:   (@blockReason) -> @speed = 0
    unblock: -> @speed = @topSpeed; delete @blockReason
    
    getLength: -> @cars.length * Train.carDist
    
    carDelta:   (car) -> @path.normDelta @path.delta-Train.carDist*(car.index)
    tailDelta:        -> @path.normDelta @path.delta-Train.carDist*(@cars.length-1)
    headTrack:        -> @path.currentTrack()
    currentTrack:     -> @path.currentTrack()
    prevTrack:        -> @path.prevTrack()
    nextNode:         -> @path.nextNode()
    tailTrack:        -> @path.trackAtDelta @tailDelta()
    tailPrevTrack:    -> @path.prevTrack @tailDelta()
    tailPrevNode:     -> @path.prevNode @tailDelta()
    tailPrevDistance: -> @path.prevDistance @tailDelta()
    headPrevDistance: -> @path.prevDistance()
      
    trackRevers:      -> @path.revers[@path.indexAtDelta()]
    
    # 000   000  00000000   0000000     0000000   000000000  00000000  
    # 000   000  000   000  000   000  000   000     000     000       
    # 000   000  00000000   000   000  000000000     000     0000000   
    # 000   000  000        000   000  000   000     000     000       
    #  0000000   000        0000000    000   000     000     00000000  
    
    update: (scaledDelta, timeSum) ->
        
        for car,index in @cars
            car.update scaledDelta, timeSum, @
            
    advance: (advance) ->
        
        â–´ @path

        @path.advance advance
                
        for car,index in @cars
            car.moveToPathDelta @path, -Train.carDist*index
            
        @mesh.position.copy @cars[0].mesh.position
        @mesh.position.z += 1
        @mesh.material = @cars[0].mesh.children[1].material
        
module.exports = Train
