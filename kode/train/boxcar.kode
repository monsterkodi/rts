
Car = require './car'

function Boxcar extends Car

    @: (train) ->
        
        super train, world.construct.meshes.boxcar.clone()
        
    toSave: ->
        
        s = type:'boxcar'
        if @cargo âžœ s.cargo = @cargo.resource
        s
    
    isEmpty: -> not @hasCargo()
    hasCargo: -> @cargo
    takeCargo: -> 
        delete @waitingForUnload
        c = @cargo
        delete c?.mesh.handler
        delete @cargo
        c
        
    setCargo: (@cargo) ->
        delete @waitingForCargo
        @cargo.mesh.handler = @
        @mesh.add @cargo.mesh
        @cargo.mesh.quaternion.identity()
        @cargo.mesh.position.set 0 0.85 0
        
    setColor: (color) ->
        
        super color
        
        @mesh.children[0].material = @mesh.children[0].material.clone()
        @mesh.children[0].material.emissive.copy color
        
    setColorByName: (name) ->
        
        @setColor Colors.train[name]

        @mesh.children[0].material = @mesh.children[0].material.clone()
        @mesh.children[0].material.emissive.copy Colors.piston[name]

    deadEye: ->
        
        @mesh.children[0].material = Materials.train.window
        
module.exports = Boxcar