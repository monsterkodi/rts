###
00000000  000   000   0000000   000  000   000  00000000  
000       0000  000  000        000  0000  000  000       
0000000   000 0 000  000  0000  000  000 0 000  0000000   
000       000  0000  000   000  000  000  0000  000       
00000000  000   000   0000000   000  000   000  00000000  
###

Car = require './car'
CargoSelector = require './cargoselector'

function Engine extends Car
    
    @: (train) ->
        
        super train, world.construct.meshes.engine.clone()
        
        label = world.addLabel text:@train.name, size:0.5 mono:true
        label.position.z = 2.0
        label.position.y = 0.9
        label.color = 0xffffff
        label.name = @train.name + '.label'
        @mesh.add label

        @mesh.handler = @
        for child in @mesh.children
            child.handler = @

    setColor: (color) ->
        
        super color
        
        @mesh.children[1].material = @mesh.children[1].material.clone()
        # @mesh.children[2].material = @mesh.children[2].material.clone()
        # @mesh.children[2].material.emissive.copy color

        # @mesh.children[3].material = @mesh.children[3].material.clone()
        # @mesh.children[3].material.emissive.copy color
        
    setColorByName: (@colorName) ->
        
        @setColor Colors.train[@colorName]
        
        @mesh.children[2].material = @mesh.children[2].material.clone() # piston
        @mesh.children[2].material.emissive.copy Colors.piston[@colorName]

        @mesh.children[3].material = @mesh.children[3].material.clone() # lights
        @mesh.children[3].material.emissive.copy Colors.piston[@colorName]
        
    isRearEngine: ->
        
        @ == @train.cars[-1]
        
    moveToPathDelta: (path, delta) ->
        
        super path, delta
        
        if @isRearEngine()
            @mesh.rotateY deg2rad 180
            
    onEnter: (hit, nextHit, event) =>
        
        if event.buttons == 0
            if not @cargoSelector
                @cargoSelector = new CargoSelector @
                
    onDrag: (hit, downHit) =>
        
        return if @physics
        dist = hit.point.distanceTo downHit.point
        if dist > 0.5
            log 'startDrag!' @name
            if @isRearEngine()
                @train.removeCar @
                @physics = world.physics.addCar @
            else
                @train.removeFromTrack()
                @physics = world.physics.addTrain @train
            
    onDragDone: (hit, downHit) =>
        
        log 'drag done!' @name
            
    onLeave: (hit, nextHit, event) =>
        
        # if event.buttons == 0
            # if @cargoSelector
                # @cargoSelector.del()
                # delete @cargoSelector
        
    update: (delta, timeSum, train) ->
        
        return if @isRearEngine()
        
        x = 0.2*Math.sin 2*timeSum*train.speed
        @mesh.children[1].scale.set 1.2+x, 1 1
        
        sin = Math.sin 2*timeSum*train.speed*train.advanceFactor
        if sin > 0
            c = 0.5+sin
        else
            c = 0.5+0.5*sin
            
        if @colorName
            col = Colors.piston[@colorName]
            @mesh.children[1].material.emissive.setRGB col.r*c, col.g*c, col.b*c
        
module.exports = Engine
