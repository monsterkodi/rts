###
00000000    0000000   000000000  000   000
000   000  000   000     000     000   000
00000000   000000000     000     000000000
000        000   000     000     000   000
000        000   000     000     000   000
###

function Path

    @: (@train) ->
        
        @name   = @train.name + '.path'
        @delta  = 0
        @tracks = []
        @nodes  = []
        @revers = []
        
        post.on 'delTrack' @onDelTrack
        post.on 'delNode'  @onDelNode

    del: -> 
    
        @train.explode()
        delete @train.path

    toSave: ->
        
        delta:  @delta
        tracks: @tracks.map (t) -> t.name
        nodes:  @nodes.map (n) -> n.name
        revers: @revers
        
    toString: ->
        s = @train.name
        for i in 0...@tracks.length
            s += ' ➜ '
            s += @tracks[i].name
            if @revers[i]
                s += ' ◂ ' + @nodes[i].name #+ @tracks[i].node[0].name
            else
                s += ' ▸ ' + @nodes[i].name  #+ @tracks[i].node[1].name
            # s += 'n'
        s
            
    reverse: ->
        
        @tracks.reverse()
        @revers.reverse()
        @revers = @revers.map (r) -> not r
        @nodes.reverse()
        @nodes.shift()
        @nodes.push @tracks[-1].node[@revers[-1] ? 0 : 1]
        
    onDelTrack: (track) =>
        
        if track in @tracks
            ▴ track != @train.track
            ▴ @currentTrack() == @train.track
            if @currentTrack() != @train.track
                log @currentTrack().name, @train?.track?.name
                return
            @delta  = @prevDistance()
            @tracks = [@currentTrack()]
            @nodes  = [@nextNode()]
            @revers = [@tracks[0].node[1] != @nodes[0]]
            
    onDelNode: (node) =>
        
        while (i = @nodes.indexOf node) >= 0
            @nodes.splice i, 1
            
    addTrackNode: (track, node) ->
        
        @nodes.push node
        @tracks.push track
        @revers.push track.node[0] == node
        
    shiftTail: ->
        
        ▴ @tracks.length > 1
        @delta -= @deltaAtIndex 1
        @nodes.shift()
        @tracks.shift()
        @revers.shift()
        
    getLength: -> 
        
        cd = 0
        for ti in 0...@tracks.length
            if @tracks[ti].curve
                cd += @tracks[ti].curve.getLength()
            else
                log 'dafuk?' @name, ti, @tracks[ti]
        cd
                
    deltaAtIndex: (index) ->
        if index >= @tracks.length ➜ return @getLength()
        if index <= 0 ➜ return 0
        cd = 0
        for ti in 0...index
            if @tracks[ti].curve
                cd += @tracks[ti].curve.getLength()
            else
                log 'dafuk?' @name, ti, @tracks[ti]
        cd
            
    indexAtDelta: (d=@delta) ->
        nd = @normDelta d
        cd = 0
        for t,i in @tracks
            if t.curve
                cd += t.curve.getLength()
            else
                log 'dafuk?' @name, i, t
            if cd >= nd
                return i
        log 'dafuk?' @name, d, nd, cd
        
    nodeAtDelta:  (d=@delta) -> @nodes[@indexAtDelta d]
    curveAtDelta: (d=@delta) -> @tracks[@indexAtDelta d].curve
    posAtDelta:   (d=@delta) ->
        nd = @normDelta d
        di = @indexAtDelta nd
        restDelta = nd - @deltaAtIndex di
        if restDelta < 0
            log 'darfugg?'
        else if restDelta - @tracks[di].curve.getLength() > 0.001
            for t,i in @tracks
                log i, t.curve.getLength(), @deltaAtIndex i
            log 'aertfsf?' restDelta, di, @tracks.length, @tracks[di].curve.getLength()
        p = restDelta / @tracks[di].curve.getLength()
        if @revers[di]
            p = 1 - p
        clamp 0 1 p
                
    currentIndex: -> @indexAtDelta @delta
    
    nextNode: (d=@delta) -> @nodes[@indexAtDelta(d)]
    prevNode: (d=@delta) -> 
        di = @indexAtDelta d
        if di == 0
            @tracks[0].node[@revers[0] ? 1 : 0]
        else
            @nodes[di-1]
    
    prevTrack:    -> @tracks[@currentIndex()-1]
    currentTrack: -> @tracks[@currentIndex()]
    nextTrack:    -> @tracks[@currentIndex()+1]
    
    trackAtDelta: (d=@delta) -> @tracks[@indexAtDelta d]
        
    currentCurve: -> @currentTrack().curve
    currentPos:   -> @posAtDelta @delta
    
    nextDistance: (d=@delta) -> @deltaAtIndex(@indexAtDelta(d)+1) - d
    prevDistance: (d=@delta) -> d - @deltaAtIndex @indexAtDelta d
            
    advance: (delta) -> @delta = @normDelta @delta+delta
    
    getPoint: (point, offset=0) ->
        d = @normDelta @delta+offset
        u = @posAtDelta d
        ▴ 0 <= u <= 1
        @curveAtDelta(d).getPointAt u, point

    getTangent: (point, offset=0) ->
        d = @normDelta @delta+offset
        p = @posAtDelta d
        c = @curveAtDelta d
        if not point 
            log 'darfugg?'
            return vec 0 1 0
        if not c
            log 'DARKFUG?'
            return vec 0 1 0
        ▴ 0 <= p <= 1
        try
            c.getTangentAt p, point
        catch err
            error 'ERROR!' err
            return vec 0 1 0
        if @revers[@indexAtDelta d]
            point.multiplyScalar -1

    moveMesh: (mesh, offset) ->
        
        @getPoint mesh.position, offset
        @getTangent Vector.tmp, offset
        Vector.tmp.add mesh.position
        mesh.up.set 0 0 1
        mesh.lookAt Vector.tmp
        mesh.position.add vec(mesh.up).scale 0.85
        
    normDelta: (d) ->
        
        length = @getLength()
        return 0 if not length
        (d+10*length) % length
        
module.exports = Path
