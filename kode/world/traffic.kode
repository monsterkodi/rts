###
000000000  00000000    0000000   00000000  00000000  000   0000000
   000     000   000  000   000  000       000       000  000     
   000     0000000    000000000  000000    000000    000  000     
   000     000   000  000   000  000       000       000  000     
   000     000   000  000   000  000       000       000   0000000
###

HEAD_DISTANCE    = 12
TAIL_DISTANCE    = 8
REAREND_DISTANCE = 6

function Traffic

    @: ->
        
        @trains = []
    
    clear: -> @trains = []
        
    addTrain: (train) -> @trains.push train
        
    simulate: (scaledDelta, timeSum) ->
        
        @nodeSignals()
        
    nodeSignals: ->
        
        for train in @trains
            if path = train.path
                nd = path.nextDistance()
                if nd < HEAD_DISTANCE                         # train is close to target node
                    nn = path.nextNode()
                    if nn and nn.train != train               # if node is not owned by train
                        if not nn.train                       #      if node not occupied
                            nn.setTrain train                 #          train occupies node 
                        else 
                            if train not in nn.blockedTrains  # if train not alreay blocked by node
                                if path.currentTrack()  != nn.train.tailTrack() and 
                                    path.currentTrack() != nn.train.prevTailTrack() and
                                    path.nextTrack()    != nn.train.tailTrack()
                                    nn.block train            #      train gets blocked
                                else 
                                    if path.currentTrack() == nn.train.prevTailTrack()
                                        nn.setTrain train     # train is the new occupant
                
                pd = path.prevDistance()
                if pd < 1
                    ct = path.currentTrack()
                    if not ct.hasTrain train
                        train.track.subTrain train
                        train.track = ct
                        train.track.addTrain train
                                        
                tailDelta = train.tailDelta()
                tpd = path.prevDistance tailDelta
                tnd = path.nextDistance tailDelta
                if tpd > min TAIL_DISTANCE, tnd+tpd/2
                    tpn = path.prevNode tailDelta
                    if tpn.train == train
                        tpn.unblock()
                                    
    #  0000000   0000000    000   000   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000   000  0000  000  000       000       
    # 000000000  000   000   000 000   000000000  000 0 000  000       0000000   
    # 000   000  000   000     000     000   000  000  0000  000       000       
    # 000   000  0000000        0      000   000  000   000   0000000  00000000  
    
    allowTrainAdvance: (train, advance) ->
        
        oldAdvance = advance
        
        if not train.path.isLoop
            halfEngineLength = 1.9
            maxAdvance = train.path.getLength()-train.path.delta-halfEngineLength
            if advance > maxAdvance < 0.0001
                if @extendTrainPath train
                    # log 'path extended'
                    return @allowTrainAdvance train, advance
                else
                    if train.isOneWay()
                        log train.name, 'stopped at path end'
                        return maxAdvance
                    else
                        train.reverse()
                        return @allowTrainAdvance train, advance
            # log maxAdvance, advance, train.isOneWay(), train.path.isLoop
            advance = Math.min maxAdvance, advance
            
        advance = @checkCargo train, advance
            
        delta = train.path.delta+advance
        
        track = train.path.trackAtDelta delta
        
        for other in @trains
            continue if other == train
            if other.tailTrack() == track
                trainToOther = other.tailPrevDistance() - train.path.prevDistance(delta)
                if trainToOther >= 0 and trainToOther < REAREND_DISTANCE
                    advance = 0
                    break
            else if other.prevTailTrack() == track
                trainToOther = other.tailPrevDistance() + train.path.nextDistance(delta)
                if trainToOther >= 0 and trainToOther < REAREND_DISTANCE
                    advance = 0
                    break
                    
        train.advanceFactor = advance/oldAdvance
        advance
        
    extendTrainPath: (train) ->
        
        nn = train.path.nextNode()
        ot = nn.oppositeTracks train.path.currentTrack()
        if ot.length 
            train.path.addTrackNode ot[0], ot[0].nodeOpposite nn
            return ot[0]
            
    checkCargo: (train, advance) ->
        
        # log 'checkCargo' train.name, advance
        maxAdvance = advance
        minCar = null
        for car in train.boxcars()
            if car.isEmpty()
                if car.waitingForCargo
                    # log 'waitingForCargo' train.name
                    return 0
                if resource = car.nextNode().station?.providesCargo()
                    if car.train.resource[resource]
                        if car.nextDistance() < maxAdvance
                            minCar = car
                            maxAdvance = car.nextDistance()
            else
                if car.waitingForUnload
                    # log 'waitingForUnload' train.name
                    return 0
                if car.nextNode().station?.takesCargo()
                    if car.nextDistance() < maxAdvance
                        minCar = car
                        maxAdvance = car.nextDistance()
                        
        if minCar
            if minCar.isEmpty()
                # log 'startWaitingForCargo' minCar.name
                minCar.waitingForCargo = true
                if not car.nextNode().station?.carWaitingForCargo is func 
                    log car.nextNode()
                else
                    car.nextNode().station.carWaitingForCargo minCar
            else
                minCar.waitingForUnload = true
                # log 'startWaitingForUnload' minCar.name
                car.nextNode().station.carWaitingForUnload minCar
        maxAdvance

module.exports = Traffic
