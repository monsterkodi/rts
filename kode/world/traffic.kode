###
000000000  00000000    0000000   00000000  00000000  000   0000000
   000     000   000  000   000  000       000       000  000     
   000     0000000    000000000  000000    000000    000  000     
   000     000   000  000   000  000       000       000  000     
   000     000   000  000   000  000       000       000   0000000
###

HEAD_DISTANCE      = 12
TAIL_DISTANCE      = 8
REAREND_DISTANCE   = 8
COLLISION_DISTANCE = 4

function Traffic

    @:     -> @clear()
    clear: -> @trains = []
        
    addTrain: (train) -> @trains.push train
    subTrain: (train) -> 
        
        path = train.path
        
        if nn = path.nextNode()
            nn.unblockTrain train
            if nn.train == train
                nn.unblockAll()

        if pn = path.prevNode()
            if pn.train == train
                pn.unblockAll()
                
        # go trough all nodes from head to tail here?
                
        if tpn = path.prevNode train.tailDelta()
            if tpn.train == train
                tpn.unblockAll()
        
        if (i = @trains.indexOf train) >= 0
            @trains.splice i, 1
        
    #  0000000  000  00     00  000   000  000       0000000   000000000  00000000  
    # 000       000  000   000  000   000  000      000   000     000     000       
    # 0000000   000  000000000  000   000  000      000000000     000     0000000   
    #      000  000  000 0 000  000   000  000      000   000     000     000       
    # 0000000   000  000   000   0000000   0000000  000   000     000     00000000  
    
    simulate: (scaledDelta, timeSum) ->
        
        ▴ scaledDelta > 0
        
        @nodeSignals()
        
        @rearendedTrains = []
        for train in @trains
            
            advance = scaledDelta * train.speed
            if advance > 0
                advance = @allowTrainAdvance train, advance
            if advance
                train.advance advance

        @unloopRearended scaledDelta
                
        for train in @trains
            
            @pruneTrainPath train
            train.update scaledDelta, timeSum
        
    #  0000000  000   0000000   000   000   0000000   000       0000000  
    # 000       000  000        0000  000  000   000  000      000       
    # 0000000   000  000  0000  000 0 000  000000000  000      0000000   
    #      000  000  000   000  000  0000  000   000  000           000  
    # 0000000   000   0000000   000   000  000   000  0000000  0000000   
    
    nodeSignals: ->
        
        for train in @trains
            if path = train.path
                nd = path.nextDistance()
                if nd < HEAD_DISTANCE                         # train is close to target node
                    nn = path.nextNode()
                    if nn and nn.train != train               # if node is not owned by train
                        if not nn.train                       #      if node not occupied
                            if @trainCanPassThroughNode train, nn
                                nn.setTrain train             #          train occupies node 
                            else
                                train.block "cant pass trough #{nn.name}"  # train blocked by blocked track (or missing track?)
                        else 
                            if train not in nn.blockedTrains  # if train not alreay blocked by node
                                if path.currentTrack()  != nn.train.tailTrack() and 
                                    path.currentTrack() != nn.train.tailPrevTrack() and
                                    path.nextTrack()    != nn.train.tailTrack()
                                    nn.blockTrain train       #      train gets blocked by occupied node
                                else 
                                    if path.currentTrack() == nn.train.tailPrevTrack()
                                        nn.setTrain train     # train is the new occupant
                
                if ct = path.currentTrack()
                    if not ct.hasTrain train
                        train.track.subTrain train
                        train.track = ct
                        train.track.addTrain train
                                        
                tailDelta = train.tailDelta()
                tpd = path.prevDistance tailDelta
                tnd = path.nextDistance tailDelta
                if tpd > min TAIL_DISTANCE, tnd+tpd/2
                    tpn = path.prevNode tailDelta
                    if tpn.train == train
                        tpn.unblockAll()
                        
    trainCanPassThroughNode: (train, node) ->
        
        nn = train.nextNode()
        ▴ nn == node
        
        if nextTrack = @extendTrainPath train
            return nextTrack
                        
    #  0000000   0000000    000   000   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000   000  0000  000  000       000       
    # 000000000  000   000   000 000   000000000  000 0 000  000       0000000   
    # 000   000  000   000     000     000   000  000  0000  000       000       
    # 000   000  0000000        0      000   000  000   000   0000000  00000000  
    
    allowTrainAdvance: (train, advance) ->
        
        path = train.path
        oldAdvance = advance
        
        halfEngineLength = 1.9
        maxAdvance = path.getLength()-path.delta-halfEngineLength
        if advance > maxAdvance < 0.0001
            if @extendTrainPath train
                return @allowTrainAdvance train, advance
            else
                if train.isOneWay()
                    return maxAdvance
                else
                    train.reverse()
                    return @allowTrainAdvance train, advance

        advance = Math.min maxAdvance, advance
            
        advance = @checkCargo train, advance
            
        delta = path.normDelta path.delta+advance
        
        track = path.trackAtDelta delta
        
        for other in @trains
            continue if other == train
            if other.tailTrack() == track
                trainToOther = other.tailPrevDistance() - path.prevDistance(delta)
                if trainToOther >= 0 and trainToOther < REAREND_DISTANCE
                    @rearendedTrains.push [train, other]
                    advance = 0
                    break
            else if other.tailPrevTrack() == track
                trainToOther = other.tailPrevDistance() + path.nextDistance(delta)
                if trainToOther < REAREND_DISTANCE
                    @rearendedTrains.push [train, other]
                    advance = 0
                    break
            if other.headTrack() == track
                if path.revers[path.indexAtDelta delta] != other.trackRevers()
                    dist = Math.abs track.trainCurveDistance(train) - track.trainCurveDistance(other)
                    if dist < COLLISION_DISTANCE
                        log '------------------ XXXXXXXXXXXXXX  heads on collision!' train.name, other.name
                        # rts.paused = true
                        train.explode()
                        other.explode()
                        advance = 0
                        break
                    
        train.advanceFactor = advance/oldAdvance
        advance
        
    # 00000000   00000000   0000000   00000000   00000000  000   000  0000000    00000000  0000000    
    # 000   000  000       000   000  000   000  000       0000  000  000   000  000       000   000  
    # 0000000    0000000   000000000  0000000    0000000   000 0 000  000   000  0000000   000   000  
    # 000   000  000       000   000  000   000  000       000  0000  000   000  000       000   000  
    # 000   000  00000000  000   000  000   000  00000000  000   000  0000000    00000000  0000000    
    
    unloopRearended: (scaledDelta) ->
        
        return if empty @rearendedTrains

        logRearended = (m) =>
            rec = m + ' '
            for to in @rearendedTrains
                rec += ' ' + to[0].name + '➜' + to[1].name
            log rec
        
        ll = 0
        while @rearendedTrains.length
            if ll == @rearendedTrains.length
                logRearended 'loop!'
                # should check for multiple separated loops here!
                for [train, other] in @rearendedTrains
                    advance = scaledDelta * train.speed
                    if advance > 0
                        train.advance advance
                @rearendedTrains = []
                
            ll = @rearendedTrains.length
            stopping = {}
            stopped = {}

            for to in @rearendedTrains
                stopped[to[0].name] = to[1].name 
                stopping[to[1].name] = to[0].name
            
            @rearendedTrains = @rearendedTrains.filter (to) -> 
                stopped[to[0].name] and stopping[to[0].name]
                stopped[to[1].name] and stopping[to[1].name]
        
        # chain = ->
            # return if empty rearended
            # [train, other] = rearended.shift()
            # log 'chain' train.name, '➜' other.name
            # if (stoppedOther = stopped[other.name]) and (stoppingTrain = stopping[train.name]) 
                # log 'continue loop' loop.length, stoppedOther, stoppingTrain
                # loop.push [train, other]
                # visited.push train
                # if other not in visited
                    # chain()
                # else
                    # return if loop.length == 0
                    # log 'loop!' loop.length, loop, (loop.map (to) -> to[0].name + '➜' + to[1].name).join " "
                    # for [train, other] in loop
                        # advance = scaledDelta * train.speed
                        # if advance > 0
                            # train.advance advance
                    # loop = []
            # else
                # log 'not a loop'
                # for v in visited
                    # delete stopped[v.name]
                    # delete stopping[v.name]
                # loop = []
                # visited = []
#         
        # while rearended.length
            # rec = ''
            # rearended.map (to) -> 
                # rec += ' ' + to[0].name + '➜' + to[1].name
            # log 'rec' rec
            # chain()
        
    # 00000000  000   000  000000000  00000000  000   000  0000000    
    # 000        000 000      000     000       0000  000  000   000  
    # 0000000     00000       000     0000000   000 0 000  000   000  
    # 000        000 000      000     000       000  0000  000   000  
    # 00000000  000   000     000     00000000  000   000  0000000    
    
    extendTrainPath: (train) ->
        
        nn = train.nextNode()
        ot = nn.oppositeTracks train.currentTrack()
        mode = ot == nn.outTracks ? 1 : 2
        choices = []
        for nextTrack in ot
            nextNode  = nextTrack.nodeOpposite nn
            trackMode = nextTrack.modeForNode(nn) or 3
            if not (mode & trackMode)
                continue # track points in the wrong direction
            if nextTrack.hasExitBlockAtNode nn
                # log "#{nextTrack.name} exit blocked at node #{nn.name} blocking #{train.name}"
                continue
            nnopptrck = nextNode.oppositeTracks(nextTrack) ? []
            if nnopptrck.length
                choices.push [nextTrack, nextNode]
                
        if choices.length
            if choices.length == 1
                nextTrack = choices[0][0]
                nextNode  = choices[0][1]
            else
                # choice = randInt choices.length
                tracks = choices.map (c) -> c[0]
                length = tracks.map (t) -> t.lastTrainDistance()
                total  = 0
                accum  = length.map (l) -> total += l
                randm  = randRange 0 total
                choice = 0
                while accum[choice] < randm ➜ choice++
                # log "#{choice+1}" randm.toFixed(1), accum.map (a) -> a.toFixed(1)
                nextTrack = choices[choice][0]
                nextNode  = choices[choice][1]
                
            train.path.addTrackNode nextTrack, nextNode
            return nextTrack
                
    # 00000000   00000000   000   000  000   000  00000000  
    # 000   000  000   000  000   000  0000  000  000       
    # 00000000   0000000    000   000  000 0 000  0000000   
    # 000        000   000  000   000  000  0000  000       
    # 000        000   000   0000000   000   000  00000000  
    
    pruneTrainPath: (train) ->
        
        tailDelta = train.tailDelta()
        tailIndex = train.path.indexAtDelta tailDelta
        if tailIndex > 1
            headIndex = train.path.currentIndex()
            # log 'pruneTrainPath' tailIndex, headIndex
            train.path.shiftTail()
            
    #  0000000   0000000   00000000    0000000    0000000   
    # 000       000   000  000   000  000        000   000  
    # 000       000000000  0000000    000  0000  000   000  
    # 000       000   000  000   000  000   000  000   000  
    #  0000000  000   000  000   000   0000000    0000000   
    
    checkCargo: (train, advance) ->
        
        # log 'checkCargo' train.name, advance
        maxAdvance = advance
        minCar = null
        for car in train.boxcars()
            if car.isEmpty()
                if car.waitingForCargo
                    # log 'waitingForCargo' train.name
                    return 0
                if resource = car.nextNode().station?.providesCargo()
                    if car.train.resource[resource]
                        if car.nextDistance() < maxAdvance
                            minCar = car
                            maxAdvance = car.nextDistance()
            else
                if car.waitingForUnload
                    # log 'waitingForUnload' train.name
                    return 0
                if car.nextNode().station?.takesCargo()
                    if car.nextDistance() < maxAdvance
                        minCar = car
                        maxAdvance = car.nextDistance()
                        
        if minCar
            if minCar.isEmpty()
                # log 'startWaitingForCargo' minCar.name
                minCar.waitingForCargo = true
                if not minCar.nextNode().station?.carWaitingForCargo is func 
                    log 'darfuggy?' minCar.nextNode()
                else
                    minCar.nextNode().station.carWaitingForCargo minCar
            else
                minCar.waitingForUnload = true
                # log 'startWaitingForUnload' minCar.name
                minCar.nextNode().station.carWaitingForUnload minCar
        maxAdvance

module.exports = Traffic
