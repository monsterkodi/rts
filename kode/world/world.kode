###
000   000   0000000   00000000   000      0000000  
000 0 000  000   000  000   000  000      000   000
000000000  000   000  0000000    000      000   000
000   000  000   000  000   000  000      000   000
00     00   0000000   000   000  0000000  0000000  
###

Node           = require '../track/node'
Track          = require '../track/track'
Train          = require '../train/train'
Engine         = require '../train/engine'
Boxcar         = require '../train/boxcar'
Compass        = require '../track/compass'
Station        = require '../station/station'
MiningStation  = require '../station/miningstation'
CentralStation = require '../station/centralstation'
Construct      = require './construct'
Physics        = require './physics'
Convert        = require './convert'
Traffic        = require './traffic'
Save           = require './save'

function World extends Convert
    
    @: (@scene) ->
                
        window.world = @
        
        @animations = []
        @labels     = []
        @pickables  = []
        @timeSum    = 0
                    
        @save       = new Save
        @physics    = new Physics
        @traffic    = new Traffic
        @construct  = new Construct
        @compass    = new Compass
        
        @construct.init()
        
        @addFloor()
        @setLabels prefs.get 'labels' false
        @setSpeed  prefs.get 'speed' 1
        
        post.on 'addTrain' @onAddTrain
                
    addLabel: (cfg) ->
        
        label = new Text()
        label.text = cfg.text
        label.fontSize = cfg.size ? 1
        label.font = '../pug/' + (cfg.mono ? 'Meslo.woff' : 'Bahnschrift.woff')
        label.position.copy vec cfg.position ? 0
        label.color = cfg.color ? 0x9966FF
        label.anchorX = 'center'
        label.anchorY = 'middle'
        label.noHitTest = true
        label.depthOffset = -0.1
        label.visible = @getLabels()
        label.sync()
        @labels.push label
        label
        
    toggleLabels: => @setLabels not @getLabels()
    getLabels: => prefs.get 'labels'
    setLabels: (on=true) =>
        prefs.set 'labels' on
        for label in @labels
            label.visible = on
                
    #  0000000   000   000  000  00     00   0000000   000000000  00000000  
    # 000   000  0000  000  000  000   000  000   000     000     000       
    # 000000000  000 0 000  000  000000000  000000000     000     0000000   
    # 000   000  000  0000  000  000 0 000  000   000     000     000       
    # 000   000  000   000  000  000   000  000   000     000     00000000  
    
    addAnimation: (func) ->
        
        @animations.push func
        
    removeAnimation: (func) ->
        
        if (index = @animations.indexOf func) >= 0
            @animations.splice index, 1
            
    animate: (delta) ->

        â–´ delta > 0
        scaledDelta = delta * @speed
        @timeSum += scaledDelta
        
        oldAnimations = @animations.clone()
        @animations = []
        for animation in oldAnimations
            animation scaledDelta, @timeSum
        
        @simulate scaledDelta
        
    #  0000000   0000000   00     00  00000000    0000000    0000000   0000000  
    # 000       000   000  000   000  000   000  000   000  000       000       
    # 000       000   000  000000000  00000000   000000000  0000000   0000000   
    # 000       000   000  000 0 000  000        000   000       000       000  
    #  0000000   0000000   000   000  000        000   000  0000000   0000000   
    
    showCompass: (object, point, dir) ->
        
        if object and object != @compass.object

            @addObject   @compass.group
            @addPickable @compass.group
            @compass.object = null
            @compass.group.position.copy point
            @compass.setDir dir
            @compass.object = object
            
            s = clamp 1 6 rts.camera.dist/30
            @compass.group.scale.set s, s, s

    hideCompass: (object) =>
        
        if @compass.object == object or not object and @compass.object
            
            @removePickable @compass.group
            @removeObject   @compass.group
            @compass.object = null
        
    create: ->
        
    #  0000000  000      00000000   0000000   00000000   
    # 000       000      000       000   000  000   000  
    # 000       000      0000000   000000000  0000000    
    # 000       000      000       000   000  000   000  
    #  0000000  0000000  00000000  000   000  000   000  
    
    clear: ->
        
        @traffic.clear()
        
        for train in @allTrains()
            train.del()
        
        for station in @allStations()
            station.del()
            
        for node in @allNodes()
            node.del()
            
        for track in @allTracks()
            track.del()
            
        @physics.clear()
                    
    #  0000000   0000000   00     00  00000000  00000000    0000000   
    # 000       000   000  000   000  000       000   000  000   000  
    # 000       000000000  000000000  0000000   0000000    000000000  
    # 000       000   000  000 0 000  000       000   000  000   000  
    #  0000000  000   000  000   000  00000000  000   000  000   000  
    
    setCamera: (cfg={dist:10, rotate:45, degree:45}) ->
        
        rts.camera.dist   = cfg.dist   ? 10
        rts.camera.rotate = cfg.rotate ? 45
        rts.camera.degree = cfg.degree ? 45
        if cfg.pos?
            rts.camera.focusOnPoint vec cfg.pos
        else if cfg.center
            rts.camera.focusOnPoint vec cfg.center
        rts.camera.update()
        
    #  0000000  00000000   00000000  00000000  0000000    
    # 000       000   000  000       000       000   000  
    # 0000000   00000000   0000000   0000000   000   000  
    #      000  000        000       000       000   000  
    # 0000000   000        00000000  00000000  0000000    
    
    setSpeed: (speedIndex) ->
        
        @speedIndex = clamp 0, config.world.speed.length-1, speedIndex
        @speed = config.world.speed[@speedIndex]

        prefs.set 'speed'      @speedIndex
        post.emit 'worldSpeed' @speed, @speedIndex

    resetSpeed: -> @setSpeed 2
    incrSpeed:  -> @setSpeed @speedIndex + 1
    decrSpeed:  -> @setSpeed @speedIndex - 1
        
    #  0000000  000  00     00  000   000  000       0000000   000000000  00000000  
    # 000       000  000   000  000   000  000      000   000     000     000       
    # 0000000   000  000000000  000   000  000      000000000     000     0000000   
    #      000  000  000 0 000  000   000  000      000   000     000     000       
    # 0000000   000  000   000   0000000   0000000  000   000     000     00000000  
    
    simulate: (scaledDelta) ->
        
        @physics.simulate scaledDelta, @timeSum
        @traffic.simulate scaledDelta, @timeSum
        
    # 00000000  000       0000000    0000000   00000000   
    # 000       000      000   000  000   000  000   000  
    # 000000    000      000   000  000   000  0000000    
    # 000       000      000   000  000   000  000   000  
    # 000       0000000   0000000    0000000   000   000  
    
    addFloor: ->
        
        geom = new PlaneGeometry 1500 1500
        geom.translate 0 0 -0.75
        @floor = new Mesh geom, Materials.floor
        # @floor.visible = prefs.get 'floor' false
        @floor.name = 'floor'
        @scene.add @floor
        @pickables.push @floor
        
        geom = new PlaneGeometry 1500 1500
        geom.translate 0 0 0.2-0.75
        @shadowFloor = new Mesh geom, Materials.shadow
        @shadowFloor.receiveShadow = true
        @shadowFloor.name = 'shadow'
        @scene.add @shadowFloor
        
    # 000000000  00000000    0000000   000  000   000  
    #    000     000   000  000   000  000  0000  000  
    #    000     0000000    000000000  000  000 0 000  
    #    000     000   000  000   000  000  000  0000  
    #    000     000   000  000   000  000  000   000  
    
    onAddTrain: (track, delta, node, boxcars=3) =>
        
        track ?= @cursorTrack
        delta ?= track.curve.getLength()/2
        node  ?= track.node[1]
        
        if track and track.node[0] and track.node[1]
            train = @addTrain boxcars:boxcars, traffic:true
            train.path.addTrackNode track, node
            train.path.delta = delta
            train.track = track
            track.addTrain train
            if rts.paused
                train.advance 0
            train
    
    addTrain: (cfg) ->

        speed = cfg.speed ? 1
        
        train = new Train {speed, name:'T'}
        engine = @addEngine train
        
        @physics.addKinematicCar engine
        
        if cfg.boxcars
            for i in 0...cfg.boxcars
                @addBoxcar train
        if cfg.rearengine
            @addEngine train
        
        if cfg.traffic
            @traffic.addTrain train
        
        # if name in Object.keys Colors.train
            # train.setColorByName name
        
        train

    addEngine: (train) ->
                    
        train.addCar new Engine train
        
    addBoxcar: (train, num=1) ->
        
        for n in 0...num
            boxcar = train.addCar new Boxcar train
            # boxcar.setColorByName train.name if train.name in Object.keys Colors.train
            
    delTrains: =>
        
        log 'delTrains'
        for train in @allTrains()
            train.del()
            
    # 000000000  00000000    0000000    0000000  000   000  
    #    000     000   000  000   000  000       000  000   
    #    000     0000000    000000000  000       0000000    
    #    000     000   000  000   000  000       000  000   
    #    000     000   000  000   000   0000000  000   000  
    
    addNode: (cfg) -> new Node cfg
        
    allNodes:    -> @scene.children.filter((child) -> child.node    instanceof Node).map (child) -> child.node
    allTracks:   -> @scene.children.filter((child) -> child.track   instanceof Track).map (child) -> child.track
    allStations: -> @scene.children.filter((child) -> child.station instanceof Station).map (child) -> child.station
    allTrains:   -> @scene.children.filter((child) -> child.train   instanceof Train).map (child) -> child.train
    
    nodeWithName: (name) -> 
        for node in @allNodes()
            return node if node.name == name
            
    trackWithName: (name) ->
        for track in @allTracks()
            return track if track.name == name
        
    connectNodes: (n1, n2) -> @connectNodeTracks n1, n1.outTracks, n2, n2.inTracks
        
    connectNodeTracks: (n1, n1Tracks, n2, n2Tracks) ->
        
        s = n1.getPos().distanceTo n2.getPos()
        s *= 0.5
        
        d1 = n1.getDir()

        d1.scale s
        if n1Tracks != n1.outTracks
            d1.negate()
        d1.add n1.getPos()
        
        d2 = n2.getDir()
        d2.scale s
        if n2Tracks != n2.outTracks
            d2.negate()
        d2.add n2.getPos()
        
        m  = Vector.midPoint d1, d2

        f = 0.553
        c1 = Vector.midPoint n1.getPos(), d1, f
        c2 = Vector.midPoint m, d1, f
        c3 = Vector.midPoint m, d2, f
        c4 = Vector.midPoint n2.getPos(), d2, f
        
        t = @addTrack n1, n2, [c1, c2, m, c3, c4]
                
        n1Tracks.push t
        n2Tracks.push t
        t
    
    addTrack: (n1, n2, ctrlPoints, name) ->
        
        track = new Track n1, n2, ctrlPoints, name
        track
        
    delTracks: =>
        
        log 'delTracks'
        @delTrains()
        for track in @allTracks()
            track.del()
        for node in @allNodes()
            if not node.fixed
                node.del()
                        
    #  0000000  000000000   0000000   000000000  000   0000000   000   000  
    # 000          000     000   000     000     000  000   000  0000  000  
    # 0000000      000     000000000     000     000  000   000  000 0 000  
    #      000     000     000   000     000     000  000   000  000  0000  
    # 0000000      000     000   000     000     000   0000000   000   000  
    
    addCentralStation: (cfg) ->
        
        new CentralStation cfg

    addMiningStation: (cfg) ->
        
        new MiningStation cfg
        
    addStation: (cfg) ->
        
        switch cfg.name[0] 
            'M' âžœ @addMiningStation  cfg
            'C' âžœ @addCentralStation cfg
        
    # 00000000    0000000    0000000  
    # 000   000  000   000  000       
    # 00000000   000   000  0000000   
    # 000        000   000       000  
    # 000         0000000   0000000   
        
    indexToPos: (index,pos) -> 
        pos.x = ( index      & 0b11111111)-128
        pos.y = ((index>>8 ) & 0b11111111)-128
        pos.z = ((index>>16) & 0b11111111)-128
        pos
        
    invalidPos: (pos) -> not @validPos pos
    validPos: (pos) -> 

        return false if pos.x > 127 or pos.x < -127
        return false if pos.y > 127 or pos.y < -127
        return false if pos.z > 127 or pos.z < -127
        return true
        
    roundPos: (v) -> 
        Vector.tmp.copy v
        Vector.tmp.rounded()
        
    # 00000000   000   0000000  000   000   0000000   0000000    000      00000000   0000000  
    # 000   000  000  000       000  000   000   000  000   000  000      000       000       
    # 00000000   000  000       0000000    000000000  0000000    000      0000000   0000000   
    # 000        000  000       000  000   000   000  000   000  000      000            000  
    # 000        000   0000000  000   000  000   000  0000000    0000000  00000000  0000000   
    
    addPickable: (mesh) ->
        
        if mesh not in @pickables
            @pickables.push mesh
        
    removePickable: (mesh) ->
        
        if mesh in @pickables
            @pickables.splice @pickables.indexOf(mesh), 1
        
    addObject: (mesh) ->
        
        @scene.add mesh
        
    removeObject: (mesh) ->
        
        mesh.removeFromParent()
        
    addBody: (body) -> @physics.addBody body
        
    removeBody: (body) -> if body âžœ @physics.removeBody body
    
    tidyUp: => @physics.clear()
            
module.exports = World
