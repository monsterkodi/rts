###
00000000   000   000  000   000   0000000  000   0000000   0000000
000   000  000   000   000 000   000       000  000       000     
00000000   000000000    00000    0000000   000  000       0000000 
000        000   000     000          000  000  000            000
000        000   000     000     0000000   000   0000000  0000000 
###

CANNON = require 'cannon-es'
CannonDebugger  = require 'cannon-es-debugger'

function Physics

    @: ->

        @cannon = new CANNON.World gravity: new CANNON.Vec3 0 0 -9
            
        @cannonDebugger = new CannonDebugger world.scene, @cannon
        
        groundBody = new CANNON.Body type:CANNON.Body.STATIC, shape:new CANNON.Plane()
        groundBody.position.z = -0.5
        @cannon.addBody groundBody
                    
        @poleBody = new CANNON.Body type:CANNON.Body.KINEMATIC
        @poleBody.keep = true
        @poleBody.addShape new CANNON.Cylinder 0.1 0.1 5 8
        @poleBody.addShape new CANNON.Sphere 0.3
        @poleBody.shapeOffsets[0].y = 2.5
        @poleBody.shapeOffsets[1].y = 5
        @poleBody.quaternion.copy Quaternion.unitVectors Vector.unitY, Vector.unitZ
        geom = Geom.merge
            Geom.cylinder(radius:0.1 height:5, dir:Vector.unitY, pos:[0 2.5 0]),
            Geom.sphere(radius:0.3 pos:[0 5 0])
        @poleBody.mesh = new Mesh geom, Materials.physics.chain
        @poleBody.mesh.setShadow()
        world.scene.add @poleBody.mesh
        @cannon.addBody @poleBody
           
        if false
            @cylinderBody1 = new CANNON.Body
                mass: 0.1
                shape: new CANNON.Cylinder 0.8 1 4 16
            @cylinderBody1.position.set -5 0 5
            @cylinderBody1.shapeOrientations[0].setFromVectors new CANNON.Vec3(0 1 0), new CANNON.Vec3(0 0 1)
            @cannon.addBody @cylinderBody1
                  
            @cylinderBody2 = new CANNON.Body
                mass: 0.1
                shape: new CANNON.Cylinder 0.5 1 4 16
            @cylinderBody2.position.set 5 0 5
            @cylinderBody2.shapeOrientations[0].setFromVectors new CANNON.Vec3(0 1 0), new CANNON.Vec3(0 0 1)
            @cannon.addBody @cylinderBody2
            
            constraint = new CANNON.ConeTwistConstraint @cylinderBody1, @cylinderBody2,
                collideConnected: true 
                wakeUpBodies:true
                # angle: deg2rad 90 
                axisA:  new CANNON.Vec3  0 0 1
                pivotA: new CANNON.Vec3  0 0 3
                axisB:  new CANNON.Vec3  0 0 -1
                pivotB: new CANNON.Vec3  0 0 3
                maxForce: 10
                twistAngle: deg2rad 180
            
            @cannon.addConstraint constraint
            
        @addChain()
        
    clear: ->
        
        meshBodies = @cannon.bodies.filter (b) -> b.mesh and not b.keep
        for body in meshBodies
            @removeBody body
        
    addBody: (body) -> @cannon.addBody body
    removeBody: (body) ->
        
        body.mesh.removeFromParent()
        delete body.mesh
        @cannon.removeBody body
        
    #  0000000  000  00     00  000   000  000       0000000   000000000  00000000  
    # 000       000  000   000  000   000  000      000   000     000     000       
    # 0000000   000  000000000  000   000  000      000000000     000     0000000   
    #      000  000  000 0 000  000   000  000      000   000     000     000       
    # 0000000   000  000   000   0000000   0000000  000   000     000     00000000  
    
    simulate: (scaledDelta, timeSum) ->
        
        @poleBody.position.copy vec(@poleBody.position).lerp rts.centerHelper.position, 0.2
        @poleBody.quaternion.copy rts.centerHelper.quaternion

        p = vec()
        q = new Quaternion
        for b in @cannon.bodies
            if b.kinematic
                b.kinematic.getWorldPosition p
                b.kinematic.getWorldQuaternion q
                b.position.copy p
                b.quaternion.copy q
                    
        @cannon.step 1/60, scaledDelta, 10 # max substeps
        if prefs.get 'cannon'
            @cannonDebugger.update()
        
        for b in @cannon.bodies
            if b.mesh
                b.mesh.position.copy b.position
                b.mesh.quaternion.copy b.quaternion
            
    #  0000000   0000000   00000000    0000000    0000000   
    # 000       000   000  000   000  000        000   000  
    # 000       000000000  0000000    000  0000  000   000  
    # 000       000   000  000   000  000   000  000   000  
    #  0000000  000   000  000   000   0000000    0000000   
    
    addCargo: (cargo) ->
        
        return if not cargo
        
        quat = new Quaternion
        pos = vec()
        cargo.mesh.getWorldPosition pos
        cargo.mesh.getWorldQuaternion quat
        world.scene.add cargo.mesh
        cargo.mesh.position.copy pos
        cargo.mesh.quaternion.copy quat
        cargo.mesh.position.z += 2

        cb = new CANNON.Body mass:1, shape:new CANNON.Box new CANNON.Vec3 1 1 1
        cb.quaternion.copy cargo.mesh.quaternion
        cb.position.copy cargo.mesh.position
        cb.mesh = cargo.mesh
        @cannon.addBody cb
        cargo.body = cb
        cb
            
    #  0000000   0000000   00000000   
    # 000       000   000  000   000  
    # 000       000000000  0000000    
    # 000       000   000  000   000  
    #  0000000  000   000  000   000  
    
    addCar: (car) ->
        
        @addCargo car.takeCargo?()
        
        cb = new CANNON.Body mass:1, shape:new CANNON.Cylinder 1 1 3.5 8
        cb.shapeOrientations[0].setFromVectors new CANNON.Vec3(0 1 0), new CANNON.Vec3(0 0 1)
        car.mesh.position.z += 0.5
        cb.quaternion.copy car.mesh.quaternion
        cb.position.copy car.mesh.position
        cb.mesh = car.mesh
        @cannon.addBody cb
        car.body = cb
        cb

    # 000   000  000  000   000  00000000  00     00   0000000   000000000  000   0000000  
    # 000  000   000  0000  000  000       000   000  000   000     000     000  000       
    # 0000000    000  000 0 000  0000000   000000000  000000000     000     000  000       
    # 000  000   000  000  0000  000       000 0 000  000   000     000     000  000       
    # 000   000  000  000   000  00000000  000   000  000   000     000     000   0000000  
    
    addKinematicCar: (car) ->
        
        cb = new CANNON.Body type:CANNON.Body.KINEMATIC, shape:new CANNON.Cylinder 1 1 3.5 8
        cb.shapeOrientations[0].setFromVectors new CANNON.Vec3(0 1 0), new CANNON.Vec3(0 0 1)
        cb.quaternion.copy car.mesh.quaternion
        cb.position.copy car.mesh.position
        cb.kinematic = car.mesh
        @cannon.addBody cb
        cb
        
    removeKinematicCar: (car) ->
        
        for body in @cannon.bodies
            if body.kinematic == car.mesh
                @cannon.removeBody body
                return
                
    addKinematicArm: (arm) ->
        
        cb = new CANNON.Body type:CANNON.Body.KINEMATIC
        cb.addShape new CANNON.Box new CANNON.Vec3 1.2 1.2 1.2
        cb.shapeOffsets[0].z = -1.2
        mesh = arm.handMesh
        cb.kinematic = mesh
        @cannon.addBody cb
        cb
        
    # 000000000  00000000    0000000   000  000   000  
    #    000     000   000  000   000  000  0000  000  
    #    000     0000000    000000000  000  000 0 000  
    #    000     000   000  000   000  000  000  0000  
    #    000     000   000  000   000  000  000   000  
    
    addTrain: (train) ->
        
        return if train.cars[0].body
                
        for car in train.cars
            @addCar car

        # for car,i in train.cars
            # if i > 0
                # @cannon.addConstraint new CANNON.ConeTwistConstraint train.cars[i-1].body, car.body,
                    # axisA:  new CANNON.Vec3  0 0 1
                    # pivotA: new CANNON.Vec3  0 0 3
                    # axisB:  new CANNON.Vec3  0 0 -1
                    # pivotB: new CANNON.Vec3  0 0 3
                    # twistAngle: deg2rad 90
            
    #  0000000  000   000   0000000   000  000   000  
    # 000       000   000  000   000  000  0000  000  
    # 000       000000000  000000000  000  000 0 000  
    # 000       000   000  000   000  000  000  0000  
    #  0000000  000   000  000   000  000  000   000  
    
    addChain: ->
        
        cbs = []
        num = 16
        for i in 0...num
    
            p = @poleBody.position
            r = 0.25+(1 - i/num)*0.2
            
            cb = new CANNON.Body mass:1 shape:new CANNON.Sphere r
            cb.position.set p.x, p.y-i*0.5, p.z
            cb.mesh = new Mesh Geom.sphere(radius:r, sgmt:8), Materials.physics.chain
            cb.keep = true
            cb.mesh.setShadow()
            world.scene.add cb.mesh
            cbs.push cb
            @cannon.addBody cb
            
        for cb,i in cbs
            if i == 0
                polePivot = new CANNON.Vec3 0 5 0
                ballPivot = new CANNON.Vec3 0 0 0
                cstr = new CANNON.PointToPointConstraint @poleBody, polePivot, cbs[i], ballPivot
                cstr.collideConnected = false
            else
                cstr = new CANNON.DistanceConstraint cbs[i-1], cbs[i], cbs[i-1].shapes[0].radius + cbs[i].shapes[0].radius
                cstr.collideConnected = false
            @cannon.addConstraint cstr

    addStation: (station) ->
        
        cb = new CANNON.Body type:CANNON.Body.STATIC
        cb.addShape new CANNON.Box new CANNON.Vec3 3 3 3
        cb.shapeOffsets[0].z = 2.5
        cb.position.copy station.group.position
        @cannon.addBody cb
        
    addStorage: (storage) -> 

        cb = new CANNON.Body type:CANNON.Body.STATIC
        cb.addShape new CANNON.Box new CANNON.Vec3 3 3 0.5
        storage.group.getWorldPosition Vector.tmp
        cb.position.copy Vector.tmp
        @cannon.addBody cb
        
module.exports = Physics
