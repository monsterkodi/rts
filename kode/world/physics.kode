###
00000000   000   000  000   000   0000000  000   0000000   0000000
000   000  000   000   000 000   000       000  000       000     
00000000   000000000    00000    0000000   000  000       0000000 
000        000   000     000          000  000  000            000
000        000   000     000     0000000   000   0000000  0000000 
###

CANNON = require 'cannon-es'
CannonDebugger  = require 'cannon-es-debugger'

function Physics

    @: ->

        @cannon = new CANNON.World gravity: new CANNON.Vec3 0 0 -9
            
        @cannonDebugger = new CannonDebugger world.scene, @cannon
        
        @bodies = []
        
        groundBody = new CANNON.Body type:CANNON.Body.STATIC, shape: new CANNON.Plane()
        groundBody.position.z = -0.5
        @cannon.addBody groundBody
                    
        @poleBody = new CANNON.Body
            type: CANNON.Body.KINEMATIC
            shape: new CANNON.Cylinder 0.1 0.1 5 8
        @poleBody.addShape new CANNON.Sphere 0.3
        @poleBody.shapeOffsets[1].y = 2.65
        @poleBody.position.set 0 0 5
        @poleBody.quaternion.copy Quaternion.unitVectors Vector.unitY, Vector.unitZ
        @cannon.addBody @poleBody
           
        if false
            @cylinderBody1 = new CANNON.Body
                mass: 0.1
                shape: new CANNON.Cylinder 0.8 1 4 16
            @cylinderBody1.position.set -5 0 5
            @cylinderBody1.shapeOrientations[0].setFromVectors new CANNON.Vec3(0 1 0), new CANNON.Vec3(0 0 1)
            @cannon.addBody @cylinderBody1
                  
            @cylinderBody2 = new CANNON.Body
                mass: 0.1
                shape: new CANNON.Cylinder 0.5 1 4 16
            @cylinderBody2.position.set 5 0 5
            @cylinderBody2.shapeOrientations[0].setFromVectors new CANNON.Vec3(0 1 0), new CANNON.Vec3(0 0 1)
            @cannon.addBody @cylinderBody2
            
            constraint = new CANNON.ConeTwistConstraint @cylinderBody1, @cylinderBody2,
                collideConnected: true 
                wakeUpBodies:true
                # angle: deg2rad 90 
                axisA:  new CANNON.Vec3  0 0 1
                pivotA: new CANNON.Vec3  0 0 3
                axisB:  new CANNON.Vec3  0 0 -1
                pivotB: new CANNON.Vec3  0 0 3
                maxForce: 10
                twistAngle: deg2rad 180
            
            @cannon.addConstraint constraint
            
        @addChain()
        
    simulate: (scaledDelta, timeSum) ->
        
        target = vec Vector.unitY
        target.applyQuaternion rts.centerHelper.quaternion
        target.scale 2.5
        target.add rts.centerHelper.position
        @poleBody.position.copy vec(@poleBody.position).lerp target, 0.2
        @poleBody.quaternion.copy rts.centerHelper.quaternion
        
        # @cannon.fixedStep()
        @cannon.step 1/60, scaledDelta
        if prefs.get 'cannon'
            @cannonDebugger.update()
        @postLoop()
        
    postLoop: =>
        
        for b in @bodies
            b.mesh.position.copy b.position
            b.mesh.quaternion.copy b.quaternion
            
    addCargo: (cargo) ->
        
        return if not cargo
        
        quat = new Quaternion
        pos = vec()
        cargo.mesh.getWorldPosition pos
        cargo.mesh.getWorldQuaternion quat
        world.scene.add cargo.mesh
        cargo.mesh.position.copy pos
        cargo.mesh.quaternion.copy quat
        cargo.mesh.position.z += 2

        cb = new CANNON.Body mass:1, shape:new CANNON.Box new CANNON.Vec3 1 1 1
        cb.quaternion.copy cargo.mesh.quaternion
        cb.position.copy cargo.mesh.position
        cb.mesh = cargo.mesh
        @cannon.addBody cb
        @bodies.push cb
        cargo.body = cb
        cb
            
    addCar: (car) ->
        
        @addCargo car.takeCargo?()
        
        cb = new CANNON.Body mass:1, shape:new CANNON.Cylinder 1 1 3.5 8
        cb.shapeOrientations[0].setFromVectors new CANNON.Vec3(0 1 0), new CANNON.Vec3(0 0 1)
        car.mesh.position.z += 0.5
        cb.quaternion.copy car.mesh.quaternion
        cb.position.copy car.mesh.position
        cb.mesh = car.mesh
        @cannon.addBody cb
        @bodies.push cb
        car.body = cb
        cb
            
    addTrain: (train) ->
        
        return if train.cars[0].body
        
        train.removeFromTrack()
        
        for car in train.cars
            @addCar car

        return
        for car,i in train.cars
            if i > 0
                @cannon.addConstraint new CANNON.ConeTwistConstraint train.cars[i-1].body, car.body,
                    axisA:  new CANNON.Vec3  0 0 1
                    pivotA: new CANNON.Vec3  0 0 3
                    axisB:  new CANNON.Vec3  0 0 -1
                    pivotB: new CANNON.Vec3  0 0 3
                    # maxForce: 10
                    twistAngle: deg2rad 90
            
    addChain: ->
        
        cbs = []
        num = 24
        for i in 0...num
    
            p = @poleBody.position
            r = 0.25+(1 - i/num)*0.2
            
            cb = new CANNON.Body mass:1 shape:new CANNON.Sphere r
            cb.position.set p.x, p.y-i*0.5, p.z
            cb.mesh = new Mesh Geom.sphere(radius:r, sgmt:8), Materials.physics.chain
            cb.mesh.setShadow()
            world.scene.add cb.mesh
            cbs.push cb
            @bodies.push cb
            @cannon.addBody cb
            
        for cb,i in cbs
            if i == 0
                cstr = new CANNON.DistanceConstraint @poleBody, cbs[i], 1
            else
                cstr = new CANNON.DistanceConstraint cbs[i-1], cbs[i], cbs[i-1].shapes[0].radius + cbs[i].shapes[0].radius
            cstr.collideConnected = false
            @cannon.addConstraint cstr

module.exports = Physics
