###
 0000000   0000000   000   000  00000000
000       000   000  000   000  000     
0000000   000000000   000 000   0000000 
     000  000   000     000     000     
0000000   000   000      0      00000000
###

Immutable = require 'seamless-immutable'

Node    = require '../track/node'
Track   = require '../track/track'
Train   = require '../train/train'
Station = require '../station/station'
Cargo   = require '../station/cargo'

function Save

    @: ->
        
        @s = Immutable
            nodes:    {}
            tracks:   {}
            stations: {}
            trains:   {}
            ids:
                node:    0
                track:   0
                train:   0
                station: 0
            
        post.on 'save'   @onSave
        post.on 'load'   @onLoad
        post.on 'reload' @onLoad
        
    onSave: => 

        prefs.set 'save' @currentState()
        
    # 000   000   0000000    0000000   000   000  
    # 0000  000  000   000  000   000  0000  000  
    # 000 0 000  000   000  000   000  000 0 000  
    # 000  0000  000   000  000   000  000  0000  
    # 000   000   0000000    0000000   000   000  
    
    toNoon: -> noon.stringify @currentState(), circular:true
        
    currentState: ->
        
        state = 
            nodes:    {}
            tracks:   {}
            stations: {}
            trains:   {}
            ids:
                node:    Node.id
                track:   Track.id
                train:   Train.id
                station: Station.id

        childs = world.scene.children.filter (child) -> child.toSave is func
        for child in childs
            state[child.toSave.key][child.name] = child.toSave()
        
        @s = @s.set 'stations' state.stations
        @s = @s.set 'nodes'    state.nodes
        @s = @s.set 'tracks'   state.tracks
        @s = @s.set 'trains'   state.trains
        @s = @s.set 'ids'      state.ids
        
    # 000       0000000    0000000   0000000    
    # 000      000   000  000   000  000   000  
    # 000      000   000  000000000  000   000  
    # 000      000   000  000   000  000   000  
    # 0000000   0000000   000   000  0000000    
    
    onLoad: =>
        
        save = prefs.get 'save'
        return if not save
        oldNoon = noon.stringify save, circular:true
        
        # log oldNoon
        
        world.clear()
        
        for name,node of save.nodes

            world.addNode node
            
        for name,station of save.stations

            s = world.addStation station
            
        for name,track of save.tracks

            n1 = world.nodeWithName track.node[0]
            n2 = world.nodeWithName track.node[1]
            
            ctrl = track.ctrl.map (c) -> vec c
            t = world.addTrack n1, n2, ctrl, name
            t.setMode track.mode ? 0
            
            s1 = save.nodes[n1.name]
            if name in (s1.in ? [])
                n1.inTracks.push t
            else if name in (s1.out ? [])
                n1.outTracks.push t
            else
                log 'dafuk?' s1, n1
                
            s2 = save.nodes[n2.name]
            if name in (s2.in ? [])
                n2.inTracks.push t
            else if name in (s2.out ? [])
                n2.outTracks.push t
            else
                log 'dafuk?' s2, n2
                
        for name,train of save.trains
            
            # log train
            
            track = world.trackWithName train.track
            node  = world.nodeWithName  train.node
            if train.cars?.length
                boxcars = train.cars.filter((c) -> c.type == 'boxcar').length
            else
                boxcars = 0
            if t = world.onAddTrain track, train.prevDist, node, boxcars, train.name
                t.resource = train.resource
                t.setColorByName train.color if train.color
                for car,i in train.cars
                    if car.type == 'boxcar'
                        if car.cargo
                            c = t.cars[i]
                            â–´ c
                            box = new Mesh Geom.box(size:2), Materials.mining[car.cargo]
                            c.setCargo new Cargo box, car.cargo
                
        if save.ids?
            log 'save.ids' save.ids
            Node.id    = save.ids.node
            Track.id   = save.ids.track
            Train.id   = save.ids.train
            Station.id = save.ids.station
        
        newNoon = @toNoon()
        if newNoon != oldNoon
            log 'DAFUK?' 
            # log 'old:' oldNoon 
            # log 'new:' newNoon

        # log newNoon
        # world.animate 0
            
module.exports = Save
