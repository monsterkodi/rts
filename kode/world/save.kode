###
 0000000   0000000   000   000  00000000
000       000   000  000   000  000     
0000000   000000000   000 000   0000000 
     000  000   000     000     000     
0000000   000   000      0      00000000
###

Immutable = require 'seamless-immutable'

function Save

    @: ->
        
        @s = Immutable
            nodes:    {}
            tracks:   {}
            stations: {}
            
        post.on 'save'   @onSave
        post.on 'load'   @onLoad
        post.on 'reload' @onLoad
        
    onSave: => 

        prefs.set 'save' @currentState()
        
    # 000   000   0000000    0000000   000   000  
    # 0000  000  000   000  000   000  0000  000  
    # 000 0 000  000   000  000   000  000 0 000  
    # 000  0000  000   000  000   000  000  0000  
    # 000   000   0000000    0000000   000   000  
    
    toNoon: -> noon.stringify @currentState(), circular:true
        
    currentState: ->
        
        state = 
            nodes:    {}
            tracks:   {}
            stations: {}

        childs = world.scene.children.filter (child) -> child.toSave is func
        for child in childs
            state[child.toSave.key][child.name] = child.toSave()
        
        @s = @s.set 'stations' state.stations
        @s = @s.set 'nodes'    state.nodes
        @s = @s.set 'tracks'   state.tracks
        
    # 000       0000000    0000000   0000000    
    # 000      000   000  000   000  000   000  
    # 000      000   000  000000000  000   000  
    # 000      000   000  000   000  000   000  
    # 0000000   0000000   000   000  0000000    
    
    onLoad: =>
        
        save = prefs.get 'save'
        return if not save
        oldNoon = noon.stringify save, circular:true
        
        world.clear()
        
        for name,node of save.nodes

            world.addNode node
            
        for name,station of save.stations

            s = world.addStation station
            
        for name,track of save.tracks

            n1 = world.nodeWithName track.node[0]
            n2 = world.nodeWithName track.node[1]
            
            ctrl = track.ctrl.map (c) -> vec c
            t = world.addTrack n1, n2, ctrl, name
            
            s1 = save.nodes[n1.name]
            if name in (s1.in ? [])
                n1.inTracks.push t
            else if name in (s1.out ? [])
                n1.outTracks.push t
            else
                log 'dafuk?' s1, n1
                
            s2 = save.nodes[n2.name]
            if name in (s2.in ? [])
                n2.inTracks.push t
            else if name in (s2.out ? [])
                n2.outTracks.push t
            else
                log 'dafuk?' s2, n2
                
        newNoon = @toNoon()
        if newNoon != oldNoon
            log 'DAFUK?' 
            # log 'old:' oldNoon 
            # log 'new:' newNoon

        log newNoon
        world.animate 0
            
module.exports = Save
