###
 0000000   0000000   000   000  00000000
000       000   000  000   000  000     
0000000   000000000   000 000   0000000 
     000  000   000     000     000     
0000000   000   000      0      00000000
###

Immutable = require 'seamless-immutable'

function Save

    @: ->
        
        @s = Immutable
            nodes:    {}
            tracks:   {}
            stations: {}
            
        @scene = world.scene
        post.on 'save'   @onSave
        post.on 'reload' @onLoad
        
        log 'save:' prefs.get 'save'
        
    onSave: =>
        
        @update()
        
    nodes:  -> @s.nodes.asMutable  deep:true
    tracks: -> @s.tracks.asMutable deep:true
    
    update: ->

        state = 
            nodes:    {}
            tracks:   {}
            stations: {}

        childs = @scene.children.filter (child) -> child.toSave is func
        for child in childs
            state[child.toSave.key][child.name] = child.toSave()
        
        # log state
        
        @s = @s.set 'stations' state.stations
        @s = @s.set 'nodes'    state.nodes
        @s = @s.set 'tracks'   state.tracks
        
        save = noon.stringify @s, circular:true
        log save
        prefs.set 'save' save
        
        @
        
    onLoad: =>
        
        save = noon.parse prefs.get 'save'
        log 'load:' save
        
        world.clear()
        
        for name,node of save.nodes
            log 'mode' node
            world.addNode node.pos, node.name
            
        for name,station of save.stations
            log 'station' station
            s = world.addStation station
            s.node = world.nodeWithName station.node
            s.node.fixed = true
            
module.exports = Save
