###
000   000  00000000  00000000  0000000    000      00000000
0000  000  000       000       000   000  000      000     
000 0 000  0000000   0000000   000   000  000      0000000 
000  0000  000       000       000   000  000      000     
000   000  00000000  00000000  0000000    0000000  00000000
###

CANNON = require 'cannon-es'

function Needle

    @: (@cannon) ->

        @poleBody = new CANNON.Body type:CANNON.Body.KINEMATIC
        @poleBody.keep = true
        @poleBody.addShape new CANNON.Cylinder 0.1 0.1 5 8
        @poleBody.addShape new CANNON.Sphere 0.3
        @poleBody.shapeOffsets[0].y = 2.5
        @poleBody.shapeOffsets[1].y = 5
        @poleBody.quaternion.copy Quaternion.unitVectors Vector.unitY, Vector.unitZ
        geom = Geom.merge
            Geom.cylinder(radius:0.1 height:5, dir:Vector.unitY, pos:[0 2.5 0]),
            Geom.sphere(radius:0.3 pos:[0 5 0])
        @poleBody.mesh = new Mesh geom, Materials.physics.chain
        @poleBody.mesh.setShadow()
        world.scene.add @poleBody.mesh
        @cannon.addBody @poleBody
        
        @addChain()
        
    #  0000000  000   000   0000000   000  000   000  
    # 000       000   000  000   000  000  0000  000  
    # 000       000000000  000000000  000  000 0 000  
    # 000       000   000  000   000  000  000  0000  
    #  0000000  000   000  000   000  000  000   000  
    
    addChain: ->
        
        cbs = []
        num = 16
        for i in 0...num
    
            p = @poleBody.position
            r = 0.25+(1 - i/num)*0.2
            
            cb = new CANNON.Body mass:1 shape:new CANNON.Sphere r
            cb.position.set p.x, p.y-i*0.5, p.z
            cb.mesh = new Mesh Geom.sphere(radius:r, sgmt:8), Materials.physics.chain
            cb.keep = true
            cb.mesh.setShadow()
            world.scene.add cb.mesh
            cbs.push cb
            @cannon.addBody cb
            
        for cb,i in cbs
            if i == 0
                polePivot = new CANNON.Vec3 0 5 0
                ballPivot = new CANNON.Vec3 0 0 0
                cstr = new CANNON.PointToPointConstraint @poleBody, polePivot, cbs[i], ballPivot
                cstr.collideConnected = false
            else
                cstr = new CANNON.DistanceConstraint cbs[i-1], cbs[i], cbs[i-1].shapes[0].radius + cbs[i].shapes[0].radius
                cstr.collideConnected = false
            @cannon.addConstraint cstr
        
    simulate: (scaledDelta, timeSum) ->
        
        @poleBody.position.copy vec(@poleBody.position).lerp rts.centerHelper.position, 0.2
        @poleBody.quaternion.copy rts.centerHelper.quaternion
            

module.exports = Needle
