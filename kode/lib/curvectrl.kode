###
 0000000  000   000  00000000   000   000  00000000   0000000  000000000  00000000   000    
000       000   000  000   000  000   000  000       000          000     000   000  000    
000       000   000  0000000     000 000   0000000   000          000     0000000    000    
000       000   000  000   000     000     000       000          000     000   000  000    
 0000000   0000000   000   000      0      00000000   0000000     000     000   000  0000000
###

MIN_CTRL_DIST = 2

function CurveCtrl

    @: (@curve, @curvePath, @index, @dragCB) ->
        
        @isLast  = @index == @curvePath.curves.length-1
        @isFirst = @index == 0
        @isMid   = not @isFirst

        @curveStart = @curve.v0
        @curveEnd   = @curve.v3
        @ctrlStart  = @curve.v1
        @ctrlEnd    = @curve.v2
        
        @group = new Group
        
        if @isMid
            geom = new BoxGeometry 1 1 1
            mesh = new Mesh geom, Materials.ctrl.end
            @prevCtrlEnd = @curvePath.curves[@index-1].v2
            mesh.position.copy @prevCtrlEnd
            mesh.onDrag = @onDrag 
            mesh.name = 'prevCtrlEnd'
            mesh.visible = false
            @meshPrevCtrlEnd = mesh
            @group.add mesh
        
        if not @isFirst
            geom = new BoxGeometry 0.71 1 1 
            mesh = new Mesh geom, Materials.ctrl.curve
            mesh.position.copy @curveStart
            mesh.onDrag = @onDrag 
            world.pickables.push mesh
            mesh.name = 'curveStart'
            # mesh.ctrl = @
            mesh.onHover = @onHover
            mesh.castShadow = true
            mesh.receiveShadow = true
            
            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add mesh.position
            mesh.lookAt Vector.tmp
            
            @meshCurveStart = mesh
            @group.add mesh
        
        geom = new BoxGeometry 1 1 1
        mesh = new Mesh geom, @isFirst ? Materials.ctrl.transparent : Materials.ctrl.start
        if not @isFirst
            mesh.onDrag = @onDrag 
        mesh.position.copy @ctrlStart
        mesh.name = 'ctrlStart'
        mesh.visible = false
        @meshCtrlStart = mesh
        @group.add mesh
            
        @group.name = 'ctrl'
        world.scene.add @group
        
    onHover: =>
        
        if CurveCtrl.activeCtrl != @
            if CurveCtrl.activeCtrl
                CurveCtrl.activeCtrl.deactivate()
            CurveCtrl.activeCtrl = @
            Node = require '../track/node'
            Node.clearActive()
            @activate()
        
    @clearActive: ->
        
        if CurveCtrl.activeCtrl
            CurveCtrl.activeCtrl.deactivate()
            CurveCtrl.activeCtrl = null
            
    activate: =>
        
        @meshPrevCtrlEnd.visible = true
        @meshCtrlStart.visible = true
        
        world.pickables.push @meshPrevCtrlEnd
        world.pickables.push @meshCtrlStart
        
    deactivate: =>

        @meshPrevCtrlEnd.visible = false
        @meshCtrlStart.visible = false
        
        i = world.pickables.indexOf @meshPrevCtrlEnd
        world.pickables.splice i, 1
        i = world.pickables.indexOf @meshCtrlStart
        world.pickables.splice i, 1
        
    onDrag: (ray, obj) =>

        if obj.name == 'curveStart'
            
            plane = new Plane
            plane.setFromNormalAndCoplanarPoint Vector.unitZ, obj.getWorldPosition(Vector.tmp)
            ray.intersectPlane plane, Vector.tmp
            
            Vector.tmp.round()
            
            delta = Vector.tmp.minus @curveStart
            @curveStart.add delta
            @ctrlStart.add delta
            @prevCtrlEnd.add delta
            @meshPrevCtrlEnd.position.copy @prevCtrlEnd
            @meshCurveStart.position.copy @curveStart
            @meshCtrlStart.position.copy @ctrlStart
            
        if obj.name == 'ctrlStart'
            
            z = @ctrlStart.z
            plane = new Plane
            plane.setFromNormalAndCoplanarPoint Vector.unitZ, obj.getWorldPosition(Vector.tmp)
            ray.intersectPlane plane, @ctrlStart
            @ctrlStart.round()
            
            dist = @ctrlStart.distanceTo @curveStart
            return if dist < 1
            if MIN_CTRL_DIST > dist
                @ctrlStart.sub @curveStart
                @ctrlStart.normalize()
                @ctrlStart.multiplyScalar MIN_CTRL_DIST
                @ctrlStart.add @curveStart
                
            @ctrlStart.z = z
            @meshCtrlStart.position.copy @ctrlStart
            
            dist = @prevCtrlEnd.distanceTo @curveStart
            @prevCtrlEnd.copy @ctrlStart
            @prevCtrlEnd.sub @curveStart
            @prevCtrlEnd.setLength -dist
            @prevCtrlEnd.add @curveStart
            @meshPrevCtrlEnd.position.copy @prevCtrlEnd
            
            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add @meshCurveStart.position
            @meshCurveStart.lookAt Vector.tmp
            
            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add @meshCtrlStart.position
            @meshCtrlStart.lookAt Vector.tmp

            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add @meshPrevCtrlEnd.position
            @meshPrevCtrlEnd.lookAt Vector.tmp

        if obj.name == 'prevCtrlEnd'
            
            z = @prevCtrlEnd.z
            plane = new Plane
            plane.setFromNormalAndCoplanarPoint Vector.unitZ, obj.getWorldPosition(Vector.tmp)
            ray.intersectPlane plane, @prevCtrlEnd
            @prevCtrlEnd.round()
            
            dist = @prevCtrlEnd.distanceTo @curveStart
            return if dist < 1
            if MIN_CTRL_DIST > dist
                @prevCtrlEnd.sub @curveStart
                @prevCtrlEnd.normalize()
                @prevCtrlEnd.multiplyScalar MIN_CTRL_DIST
                @prevCtrlEnd.add @curveStart
                
            @prevCtrlEnd.z = z
            @meshPrevCtrlEnd.position.copy @prevCtrlEnd
            
            dist = @ctrlStart.distanceTo @curveStart
            @ctrlStart.copy @prevCtrlEnd
            @ctrlStart.sub @curveStart
            @ctrlStart.setLength -dist
            @ctrlStart.add @curveStart
            @meshCtrlStart.position.copy @ctrlStart
            
            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add @meshCurveStart.position
            @meshCurveStart.lookAt Vector.tmp
            
            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add @meshCtrlStart.position
            @meshCtrlStart.lookAt Vector.tmp

            @curve.getTangent 0, Vector.tmp
            Vector.tmp.add @meshPrevCtrlEnd.position
            @meshPrevCtrlEnd.lookAt Vector.tmp
            
        @curve.updateArcLengths()
        @dragCB?()
                
    moveStartTo: (point) ->
        
        delta = Vector.tmp
        delta.copy point
               
        delta.sub @curveStart
        @curveStart.add delta
        @ctrlStart.add delta
        @meshCtrlStart.position.copy @ctrlStart
            
        @curve.updateArcLengths()

    moveEndTo: (point) ->
        
        delta = Vector.tmp
        delta.copy point
               
        delta.sub @curveEnd
        @curveEnd.add delta
        @ctrlEnd.add delta
        
        @curve.updateArcLengths()
        
module.exports = CurveCtrl
