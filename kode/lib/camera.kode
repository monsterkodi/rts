###
 0000000   0000000   00     00  00000000  00000000    0000000 
000       000   000  000   000  000       000   000  000   000
000       000000000  000000000  0000000   0000000    000000000
000       000   000  000 0 000  000       000   000  000   000
 0000000  000   000  000   000  00000000  000   000  000   000
###

{ clamp, prefs, reduce } = require 'kxk'

THREE = require 'three'
PerspectiveCamera = THREE.PerspectiveCamera

class Camera extends PerspectiveCamera

    @: (opt) ->
        
        width  = opt.view.clientWidth  *  window.devicePixelRatio
        height = opt.view.clientHeight *  window.devicePixelRatio
        
        super 70, width/height, 1, 10000 # fov, aspect, near, far
        
        @fov     = 70
        @size    = vec width, height 
        @elem    = opt.view
        @dist    = 10
        @maxDist = @far/4
        @minDist = 4
        @center  = vec()
        @degree  = 60
        @rotate  = 0
        @wheelInert = 0
        @pivotX  = 0
        @pivotY  = 0
        @moveX   = 0
        @moveY   = 0
        @moveZ   = 0
        @mouse   = vec()
        @downPos = vec()
        @centerTarget = vec()
        @quat         = quat()

        @elem.addEventListener 'mousewheel' @onMouseWheel
        @elem.addEventListener 'mousedown'  @onMouseDown
        @elem.addEventListener 'keypress'   @onKeyPress
        @elem.addEventListener 'keyrelease' @onKeyRelease
        @elem.addEventListener 'dblclick'   @onDblClick
        
        @update()

    getPosition: -> vec @position
    getDir:      -> quat(@quaternion).rotate Vector.minusZ
    getUp:       -> quat(@quaternion).rotate Vector.unitY
    getRight:    -> quat(@quaternion).rotate Vector.unitX

    del: =>
        
        @elem.removeEventListener  'keypress'   @onKeyPress
        @elem.removeEventListener  'keyrelease' @onKeyRelease
        @elem.removeEventListener  'mousewheel' @onMouseWheel
        @elem.removeEventListener  'mousedown'  @onMouseDown
        @elem.removeEventListener  'dblclick'   @onDblClick
        window.removeEventListener 'mouseup'    @onMouseUp
        window.removeEventListener 'mousemove'  @onMouseDrag 
        
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouseDown: (event) => 
        
        @downButtons = event.buttons
        @mouseMoved  = false
            
        @mouse.x = event.clientX
        @mouse.y = event.clientY
        
        @downPos.copy @mouse
        
        window.addEventListener 'mousemove' @onMouseDrag
        window.addEventListener 'mouseup'   @onMouseUp
        
    onMouseUp: (event) => 

        window.removeEventListener 'mousemove' @onMouseDrag
        window.removeEventListener 'mouseup'   @onMouseUp
        
    onDblClick: (event) =>
        
    onMouseDrag: (event) =>

        x = event.clientX-@mouse.x
        y = event.clientY-@mouse.y
        
        @mouse.x = event.clientX
        @mouse.y = event.clientY
        
        if @downPos.dist(@mouse) > 60
            @mouseMoved = true
        
        if event.buttons == 4
            s = @dist
        
        if @downPos.dist(@mouse) > 60
            @mouseMoved = true
        
        if event.buttons == 4
            s = @dist
            @pan x*2*s/@size.x, y*s/@size.y
            
        if event.buttons == 2
            @pivot 4000*x/@size.x, 2000*y/@size.y
            
    # 00000000   000  000   000   0000000   000000000  
    # 000   000  000  000   000  000   000     000     
    # 00000000   000   000 000   000   000     000     
    # 000        000     000     000   000     000     
    # 000        000      0       0000000      000     
    
    pivot: (x,y) ->
                
        @rotate += -0.1*x
        @degree += -0.1*y
        
        @storePrefs()
        
        @update()
           
    startPivotLeft: ->
        
        @pivotX = 20
        @startPivot()
        
    startPivotRight: ->
        
        @pivotX = -20
        @startPivot()

    startPivotUp: ->
        
        @pivotY = -10
        @startPivot()
        
    startPivotDown: ->
        
        @pivotY = 10
        @startPivot()
        
    stopPivot: ->
        
        @pivoting = false
        @pivotX = 0
        @pivotY = 0
       
    startPivot: -> 
        
        if not @pivoting
            rts.animate @pivotCenter
            @pivoting = true
            
    pivotCenter: (deltaSeconds) =>
        
        return if not @pivoting

        @pivot @pivotX, @pivotY
        
        rts.animate @pivotCenter
        
    # 00000000    0000000   000   000  
    # 000   000  000   000  0000  000  
    # 00000000   000000000  000 0 000  
    # 000        000   000  000  0000  
    # 000        000   000  000   000  
    
    pan: (x,y) ->
        
        Vector.tmp.set -x, 0, 0 
        Vector.tmp.applyQuaternion @quaternion

        @center.add Vector.tmp
        
        Vector.tmp.set 0, y, 0 
        Vector.tmp.applyQuaternion @quaternion
        
        @center.add Vector.tmp
        @centerTarget.copy @center
        @stopZoom()
        @storePrefs()
        @update()
        
        if not @panBlocksWheel
            @panBlocksWheel = 1.0
            rts.animate @panBlocks
            
    panBlocks: (deltaSeconds) =>
        
        @panBlocksWheel -= deltaSeconds
        if @panBlocksWheel < 0
            delete @panBlocksWheel
        else
            rts.animate @panBlocks
        
    # 00000000   0000000    0000000  000   000   0000000  
    # 000       000   000  000       000   000  000       
    # 000000    000   000  000       000   000  0000000   
    # 000       000   000  000       000   000       000  
    # 000        0000000    0000000   0000000   0000000   
                     
    focusOnPoint: (v) ->
        
        @centerTarget.copy v
        @center.copy v
        @update()
         
    fadeToPoint: (v) -> 

        @centerTarget.copy v
        @storePrefs()
        @startFadeCenter()

    startFadeCenter: -> 
        
        if not @fading
            rts.animate @fadeCenter
            @fading = true
            
    stopFading: ->
        
        @fading = false
            
    fadeCenter: (deltaSeconds) =>
        
        return if not @fading
        
        @center.fade @centerTarget, deltaSeconds
        @update()
        
        if @center.dist(@centerTarget) > 0.00001
            rts.animate @fadeCenter
        else
            delete @fading

    # 00     00   0000000   000   000  00000000  
    # 000   000  000   000  000   000  000       
    # 000000000  000   000   000 000   0000000   
    # 000 0 000  000   000     000     000       
    # 000   000   0000000       0      00000000  
    
    moveFactor: -> @dist/2
    
    startMoveForward: ->

        @moveZ = -@moveFactor()
        @startMove()

    startMoveBackward: ->

        @moveZ = @moveFactor()
        @startMove()
        
    startMoveLeft: ->
        
        @moveX = -@moveFactor()
        @startMove()
        
    startMoveRight: ->
        
        @moveX = @moveFactor()
        @startMove()

    startMoveUp: ->
        
        @moveY = @moveFactor()
        @startMove()
        
    startMoveDown: ->
        
        @moveY = -@moveFactor()
        @startMove()
        
    stopMoving: ->
        
        @moving = false
        @moveX = 0
        @moveY = 0
        @moveZ = 0
       
    startMove: -> 
        
        @stopFading()
        if not @moving
            rts.animate @moveCenter
            @moving = true
            
    moveCenter: (deltaSeconds) =>
        
        return if not @moving
        
        dir = vec()
        dir.add Vector.unitX.mul @moveX
        dir.add Vector.unitY.mul @moveY
        dir.add Vector.unitZ.mul @moveZ
        dir.scale deltaSeconds
        dir.applyQuaternion @quaternion
        
        @center.add dir
        @update()
        
        rts.animate @moveCenter
        
    moveLeft:       -> @moveXYZ -1   0   0
    moveRight:      -> @moveXYZ  1   0   0
    moveUp:         -> @moveXYZ  0   1   0
    moveDown:       -> @moveXYZ  0  -1   0
    moveForward:    -> @moveXYZ  0   0  -1
    moveBackward:   -> @moveXYZ  0   0   1
    moveXYZ: (x, y, z) ->
        @stopMoving()
        @stopFading()
        @center.add vec(x,y,z).applyQuaternion @quaternion
        @update()
        
    # 000   000  000   000  00000000  00000000  000      
    # 000 0 000  000   000  000       000       000      
    # 000000000  000000000  0000000   0000000   000      
    # 000   000  000   000  000       000       000      
    # 00     00  000   000  00000000  00000000  0000000  
    
    onMouseWheel: (event) => 
    
        if @wheelInert > 0 and event.wheelDelta < 0
            @wheelInert = 0
            return
            
        if @wheelInert < 0 and event.wheelDelta > 0
            @wheelInert = 0
            return
        
        if @panBlocksWheel
            return
            
        if Math.abs(@wheelInert) < 0.0001
            @wheelInert += event.wheelDelta * (1+(@dist/@maxDist)*3) * 0.00005
        else
            @wheelInert += event.wheelDelta * (1+(@dist/@maxDist)*3) * 0.0002
            
        if Math.abs(@wheelInert) > 0.00003
            @startZoom()

    # 0000000   0000000    0000000   00     00  
    #    000   000   000  000   000  000   000  
    #   000    000   000  000   000  000000000  
    #  000     000   000  000   000  000 0 000  
    # 0000000   0000000    0000000   000   000  

    startZoomIn: ->
        
        @wheelInert = (1+(@dist/@maxDist)*3)*10
        @startZoom()
        
    startZoomOut: ->
        
        @wheelInert = -(1+(@dist/@maxDist)*3)*10
        @startZoom()
    
    startZoom: -> 
        
        if not @zooming
            rts.animate @inertZoom
            @zooming = true
            
    stopZoom: -> 
        
        @wheelInert = 0
        @zooming = false
    
    inertZoom: (deltaSeconds) =>

        @setDistFactor 1 - clamp -0.02 0.02 @wheelInert
        @wheelInert = reduce @wheelInert, deltaSeconds*0.3
        
        if Math.abs(@wheelInert) > 0.00000001
            rts.animate @inertZoom
        else
            delete @zooming
            @wheelInert = 0
    
    setDistFactor: (factor) =>
        
        @dist = clamp @minDist, @maxDist, @dist*factor
        @update()
        
    setFov: (fov) -> @fov = clamp 2.0 175.0 fov
    
    # 00000000   00000000   00000000  00000000   0000000  
    # 000   000  000   000  000       000       000       
    # 00000000   0000000    0000000   000000    0000000   
    # 000        000   000  000       000            000  
    # 000        000   000  00000000  000       0000000   
    
    storePrefs: ->
        
        prefs.set 'camera', 
            degree: @degree 
            rotate: @rotate 
            dist:   @dist 
            center:
                x: @centerTarget.x
                y: @centerTarget.y
                z: @centerTarget.z
    
    # 000   000  00000000   0000000     0000000   000000000  00000000  
    # 000   000  000   000  000   000  000   000     000     000       
    # 000   000  00000000   000   000  000000000     000     0000000   
    # 000   000  000        000   000  000   000     000     000       
    #  0000000   000        0000000    000   000     000     00000000  
    
    update: -> 
        
        @degree = clamp 0 180 @degree
        
        @quat.reset()
        @quat.rotateAxisAngle Vector.unitZ, @rotate
        @quat.rotateAxisAngle Vector.unitX, @degree
        
        @position.copy @center
        Vector.tmp.set 0 0 @dist
        Vector.tmp.applyQuaternion @quat
        @position.add Vector.tmp
        @quaternion.copy @quat
        @updateProjectionMatrix()
        
        if compass = window.world?.compass
            s = clamp 1 6 @dist/30
            compass.group.scale.set s, s, s
        
module.exports = Camera
